#!/usr/bin/env node

let { readFileSync, statSync } = require('fs')
let { morph, parse, pathToName } = require('./lib.js')
let chalk = require('chalk')
let cleanup = require('./clean.js')
let watch = require('./watch.js')

let {
  _,
  as,
  clean,
  help,
  local,
  track,
  watch: shouldWatch,
  verbose,
  version,
} = require('minimist')(process.argv.slice(2), {
  alias: {
    help: 'h',
  },
  booleans: ['clean', 'help', 'track', 'watch', 'version'],

  default: {
    as: 'react-dom',
    clean: false,
    local: 'en',
    track: false,
    verbose: true,
    version: false,
    watch: false,
  },
})

track = track === 'true'

if (help) {
  console.log(`
  views-morph [directory]
    --as            target platform
                      react-dom (default)
                      react-native
    --clean         clean the autogenerated .view.js files
    --local         default local language, defaults to English (en)
    --track         enable UI tracking, defaults to false
    --verbose       defaults to true
    --version       print the version
    --watch         watch a directory and produce .view.js files
  `)

  process.exit()
}

if (version) {
  let pkg = require('./package.json')
  console.log(`v${pkg.version}`)
  process.exit()
}

let input = Array.isArray(_) && _[0]

if (!input || !statSync(input).isDirectory()) {
  console.error(
    `You need to specify an input directory to watch. ${input} is a file.`
  )
  process.exit()
}

if (clean) {
  cleanup(input)
  process.exit()
}

let updateNotifier = require('update-notifier')
let pkg = require('./package.json')

updateNotifier({ pkg }).notify()

console.log(`Views Tools morpher v${pkg.version}\n\n`)

console.log(
  `Will morph files at '${chalk.green(input)}' as ${chalk.green(as)} ${
    track ? 'with tracking' : 'without tracking'
  }\n`
)
console.log(chalk.yellow('A'), ' = Added')
console.log(chalk.blue('D'), ` = View deleted`)
console.log(chalk.green('M'), ` = Morphed`)
console.log(chalk.red('M'), ` = Morph failed`)
console.log(chalk.magenta('!'), ` = View doesn't exist but is being used`)
console.log(chalk.magenta('X'), ` = View name is invalid`)
console.log('\n\nPress', chalk.blue('ctrl+c'), 'to stop at any time.\n\n')

watch({
  as,
  local,
  once: !shouldWatch,
  src: input,
  track,
  verbose,
})
