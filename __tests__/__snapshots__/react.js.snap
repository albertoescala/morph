// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`e2e parses e2e Action 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  SubButton: get('Action.SubButton'),
  Text: get('Action.Text'),
  Vertical: get('Action.Vertical'),
};
",
}
`;

exports[`e2e parses e2e AnimatedButton 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('AnimatedButton.Text', 'isOn'),
  _top: get('AnimatedButton', 'isOn'),
};
",
}
`;

exports[`e2e parses e2e AnimatedButtonHoverOnly 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('AnimatedButtonHoverOnly'),
};
",
}
`;

exports[`e2e parses e2e AnimatedButtonScopeOnly 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('AnimatedButtonScopeOnly', 'before'),
};
",
}
`;

exports[`e2e parses e2e AppRegionDrag 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('AppRegionDrag.Vertical'),
};
",
}
`;

exports[`e2e parses e2e BackgroundImage 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('BackgroundImage.Horizontal'),
  Vertical: get('BackgroundImage.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Border 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Bottom: get('Border.Bottom'),
  Left: get('Border.Left', 'something'),
  Right: get('Border.Right'),
  Top: get('Border.Top'),
  _top: get('Border'),
};
",
}
`;

exports[`e2e parses e2e ClassName 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('ClassName.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Code 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Code.Text'),
  Vertical: get('Code.Vertical'),
};
",
}
`;

exports[`e2e parses e2e DefaultProps 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text1: get('DefaultProps.Text:1'),
  Text: get('DefaultProps.Text'),
  _top: get('DefaultProps'),
};
",
}
`;

exports[`e2e parses e2e Display 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('Display'),
};
",
}
`;

exports[`e2e parses e2e DynamicCaptureType 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Capture: get('DynamicCaptureType.Capture'),
};
",
}
`;

exports[`e2e parses e2e DynamicFontProps 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('DynamicFontProps.App'),
  DynamicFamily: get('DynamicFontProps.DynamicFamily'),
  DynamicFamilyAndWeight: get('DynamicFontProps.DynamicFamilyAndWeight'),
  DynamicWeight: get('DynamicFontProps.DynamicWeight'),
};
",
}
`;

exports[`e2e parses e2e DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  OnTop: get('DynamicStylesApplyToBasicBlocksOnly.OnTop'),
  Vertical: get('DynamicStylesApplyToBasicBlocksOnly.Vertical'),
};
",
}
`;

exports[`e2e parses e2e DynamicWidth 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('DynamicWidth.Vertical'),
};
",
}
`;

exports[`e2e parses e2e EmptyText 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('EmptyText'),
};
",
}
`;

exports[`e2e parses e2e FlatListPass 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Card: get('FlatListPass.Card'),
  List: get('FlatListPass.List'),
};
",
}
`;

exports[`e2e parses e2e Fragment 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('Fragment.Horizontal'),
  Text1: get('Fragment.Text:1'),
  Text: get('Fragment.Text'),
  Vertical: get('Fragment.Vertical'),
};
",
}
`;

exports[`e2e parses e2e GoTo 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('GoTo.Text'),
  Vertical: get('GoTo.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Hover 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Hover.Text'),
  _top: get('Hover', 'isStuff'),
};
",
}
`;

exports[`e2e parses e2e HyphenatedProps 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Content: get('HyphenatedProps.Content', 'inDesignSystem'),
  SomeViewThatExposesAlignItems: get(
    'HyphenatedProps.SomeViewThatExposesAlignItems'
  ),
  Vertical: get('HyphenatedProps.Vertical'),
};
",
}
`;

exports[`e2e parses e2e Indented 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('Indented.Horizontal', 'notStuff', 'move'),
  Text1: get('Indented.Text:1'),
  Text2: get('Indented.Text:2'),
  Text: get('Indented.Text'),
  Vertical: get('Indented.Vertical'),
  _top: get('Indented', 'isSomething'),
};
",
}
`;

exports[`e2e parses e2e JustText 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('JustText'),
};
",
}
`;

exports[`e2e parses e2e Lazy 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  HeavyStuff: get('Lazy.HeavyStuff'),
  _top: get('Lazy'),
};
",
}
`;

exports[`e2e parses e2e ListOfSomething 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Something: get('ListOfSomething.Something'),
  _top: get('ListOfSomething'),
};
",
}
`;

exports[`e2e parses e2e ListPass 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Card: get('ListPass.Card'),
  List: get('ListPass.List'),
};
",
}
`;

exports[`e2e parses e2e ListWhen 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Card: get('ListWhen.Card'),
  List: get('ListWhen.List'),
};
",
}
`;

exports[`e2e parses e2e ListWithKey 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Card: get('ListWithKey.Card'),
  List: get('ListWithKey.List'),
};
",
}
`;

exports[`e2e parses e2e LocalImage 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('LocalImage', 'isCat'),
};
",
}
`;

exports[`e2e parses e2e LocalImageSvg 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('LocalImageSvg'),
};
",
}
`;

exports[`e2e parses e2e LocalImageWithDefault 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('LocalImageWithDefault'),
};
",
}
`;

exports[`e2e parses e2e LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('LocalOrRemoteImageWhenCode'),
};
",
}
`;

exports[`e2e parses e2e Locals 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Named: get('Locals.Named'),
  Text1: get('Locals.Text:1'),
  Text: get('Locals.Text'),
  _top: get('Locals'),
};
",
}
`;

exports[`e2e parses e2e LocalsFormat 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Date: get('LocalsFormat.Date'),
  Percentage: get('LocalsFormat.Percentage'),
  Price: get('LocalsFormat.Price'),
  Time: get('LocalsFormat.Time'),
  _top: get('LocalsFormat'),
};
",
}
`;

exports[`e2e parses e2e NameIsType 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Texto: get('NameIsType.Texto'),
};
",
}
`;

exports[`e2e parses e2e NegativeNumber 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('NegativeNumber.Text'),
};
",
}
`;

exports[`e2e parses e2e NestedRoutes 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Link: get('NestedRoutes.Link'),
  Text1: get('NestedRoutes.Text:1'),
  Text: get('NestedRoutes.Text'),
  Topic: get('NestedRoutes.Topic'),
  Topics: get('NestedRoutes.Topics'),
};
",
}
`;

exports[`e2e parses e2e Proxy 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ActionGhostedProps: get('Proxy.ActionGhostedProps', 'isSelected'),
  Button: get('Proxy.Button'),
  Text: get('Proxy.Text'),
};
",
}
`;

exports[`e2e parses e2e Scope 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('Scope', 'notWhatMakesBlue', 'whatMakesBlue', 'somethingGreen'),
};
",
}
`;

exports[`e2e parses e2e ScopeOnCustomView 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Button: get('ScopeOnCustomView.Button', 'b', 'a'),
};
",
}
`;

exports[`e2e parses e2e ScopePopup 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Popup: get('ScopePopup.Popup'),
  Text: get('ScopePopup.Text'),
  Toggle: get('ScopePopup.Toggle', 'whatMakesBlue', 'somethingGreen'),
};
",
}
`;

exports[`e2e parses e2e ScopePopup2 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Content: get('ScopePopup2.Content', 'isSuperVisible', 'isShown'),
  Popup: get('ScopePopup2.Popup'),
  Text1: get('ScopePopup2.Text:1'),
  Text: get('ScopePopup2.Text'),
  Toggle: get('ScopePopup2.Toggle'),
};
",
}
`;

exports[`e2e parses e2e ScopedShadows 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('ScopedShadows', 'isClicked'),
};
",
}
`;

exports[`e2e parses e2e ScrollableList 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Card: get('ScrollableList.Card'),
  _top: get('ScrollableList'),
};
",
}
`;

exports[`e2e parses e2e Shadow 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  BoxShadow: get('Shadow.BoxShadow'),
  TextShadow: get('Shadow.TextShadow'),
  _top: get('Shadow'),
};
",
}
`;

exports[`e2e parses e2e SlotOnBaseAndValueOnScope 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('SlotOnBaseAndValueOnScope', 'something'),
};
",
}
`;

exports[`e2e parses e2e SomeMissingStyle 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  WindowControl: get('SomeMissingStyle.WindowControl'),
};
",
}
`;

exports[`e2e parses e2e Teleport 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('Teleport.Horizontal'),
  Text: get('Teleport.Text'),
};
",
}
`;

exports[`e2e parses e2e TestIds 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('TestIds.App'),
  External: get('TestIds.External'),
  Name: get('TestIds.Name'),
  Text1: get('TestIds.Text:1'),
  Text: get('TestIds.Text'),
};
",
}
`;

exports[`e2e parses e2e Transform 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('Transform.Text'),
  _top: get('Transform'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureEmail 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Email: get('UseCaptureEmail.Email'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureFile 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  File: get('UseCaptureFile.File'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureNumber 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Number: get('UseCaptureNumber.Number'),
};
",
}
`;

exports[`e2e parses e2e UseCapturePhone 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Phone: get('UseCapturePhone.Phone'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureSecure 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Secure: get('UseCaptureSecure.Secure'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureText 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('UseCaptureText.Text'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureTextArea 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  CaptureTextArea: get('UseCaptureTextArea.CaptureTextArea'),
};
",
}
`;

exports[`e2e parses e2e UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Capture: get('UseCaptureTextManagedFromOutside.Capture'),
};
",
}
`;

exports[`e2e parses e2e UseHorizontal 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Horizontal: get('UseHorizontal.Horizontal'),
};
",
}
`;

exports[`e2e parses e2e UseImage 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Image: get('UseImage.Image', 'another'),
};
",
}
`;

exports[`e2e parses e2e UseProxy 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  ActionGhostedProps: get('UseProxy.ActionGhostedProps'),
  Button: get('UseProxy.Button'),
  _top: get('UseProxy'),
};
",
}
`;

exports[`e2e parses e2e UseRouter 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  About: get('UseRouter.About'),
  Home: get('UseRouter.Home'),
  Horizontal: get('UseRouter.Horizontal'),
  Topics: get('UseRouter.Topics'),
};
",
}
`;

exports[`e2e parses e2e UseSvg 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Svg: get('UseSvg.Svg'),
  SvgCircle: get('UseSvg.SvgCircle'),
  SvgGroup: get('UseSvg.SvgGroup'),
  SvgPath1: get('UseSvg.SvgPath:1'),
  SvgPath2: get('UseSvg.SvgPath:2'),
  SvgPath: get('UseSvg.SvgPath'),
  SvgText: get('UseSvg.SvgText'),
};
",
}
`;

exports[`e2e parses e2e UseTable 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Cell1: get('UseTable.Cell:1'),
  Cell2: get('UseTable.Cell:2'),
  Cell: get('UseTable.Cell'),
  Description: get('UseTable.Description'),
  Header: get('UseTable.Header'),
  Location: get('UseTable.Location'),
  Name: get('UseTable.Name'),
  Table: get('UseTable.Table'),
  Text: get('UseTable.Text'),
  _top: get('UseTable'),
};
",
}
`;

exports[`e2e parses e2e UseTableOnWhen 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Cell: get('UseTableOnWhen.Cell'),
  Header: get('UseTableOnWhen.Header'),
  Name: get('UseTableOnWhen.Name'),
  Table: get('UseTableOnWhen.Table'),
  _top: get('UseTableOnWhen'),
};
",
}
`;

exports[`e2e parses e2e UseText 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('UseText', 'isSomething'),
};
",
}
`;

exports[`e2e parses e2e UseTextCustomFont 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Italic: get('UseTextCustomFont.Italic'),
  Normal: get('UseTextCustomFont.Normal'),
  _top: get('UseTextCustomFont'),
};
",
}
`;

exports[`e2e parses e2e UseVertical 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Vertical: get('UseVertical.Vertical'),
};
",
}
`;

exports[`e2e parses e2e ViewAndBlockSameName 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('ViewAndBlockSameName.App'),
  Button: get('ViewAndBlockSameName.Button'),
  Thing: get('ViewAndBlockSameName.Thing'),
};
",
}
`;

exports[`e2e parses e2e ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  _top: get('ViewNameIsntUsedInStyle'),
};
",
}
`;

exports[`e2e parses e2e When 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  App: get('When.App'),
  Text: get('When.Text'),
};
",
}
`;

exports[`e2e parses e2e WhenTopLevel 1`] = `
Object {
  "code": "const { get } = require('@viewstools/e2e');

module.exports = {
  Text: get('WhenTopLevel.Text'),
};
",
}
`;

exports[`react-dom parses react-dom Action 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import SubButton from './SubButton.view.js';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({
    label: 'Vertical',
    color: 'red',
    '&:disabled': {
      color: 'blue',
    },
  }),
};

const Action = props => {
  const track = React.useContext(TrackContext);

  return props.check ? (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      onClick={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({ block: 'Action.Vertical', action: 'click', event, props });
      }}
      disabled={props.isDisabled}
      className={\`views-block \${styles.Vertical}\`}
    >
      <span data-test-id={\`Action.Text|\`} className=\\"views-text\\">
        click me
      </span>
      <SubButton
        data-test-id={\`Action.SubButton|\`}
        isDisabled={true}
        className=\\"views-block\\"
      />
      {props.children}
    </button>
  ) : null;
};

export default Action;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "check",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
    Object {
      "defaultValue": false,
      "name": "isDisabled",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButton 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { animated, Spring } from 'react-spring';
import { css } from 'emotion';

let styles = {
  AnimatedButton1: css({
    label: 'AnimatedButton1',
    backgroundColor: 'red',
    transition: 'transform 150ms ease-in, transform 150ms ease-in-out',
    willChange: 'opacity, transform',
    opacity: 'var(--opacity)',
    transform:
      'rotateX(var(--rotateX)) rotateY(var(--rotateY)) translateX(var(--translateX)) translateY(var(--translateY))',
  }),
  Text: css({
    label: 'Text',
    willChange: 'color, font-size',
    color: 'var(--color)',
    fontSize: 'var(--fontSize)',
  }),
};

class AnimatedButton extends React.Component {
  render() {
    const { props } = this;

    return (
      <TrackContext.Consumer>
        {track => (
          <Spring
            native
            config={{ friction: 10, tension: 1 }}
            to={{ opacity: props.isOn ? 1 : 0.75 }}
          >
            {animatedAnimatedButton => (
              <Spring
                native
                config={{ friction: 15, tension: 2 }}
                to={{ translateX: \`\${props.isOn ? 20 : 10}px\` }}
              >
                {animatedAnimatedButton1 => (
                  <Spring
                    native
                    config={{ tension: 170, friction: 26 }}
                    to={{
                      color: props.isOn ? 'blue' : 'red',
                      fontSize: \`\${props.isOn ? 18 : 12}px\`,
                    }}
                  >
                    {animatedText => (
                      <animated.button
                        data-test-id={\`\${props['data-test-id'] ||
                          'AnimatedButton'}|\${props.isOn ? 'isOn|' : ''}\`}
                        onClick={event => {
                          typeof props.onClick === 'function' &&
                            props.onClick(event);

                          track({
                            block: 'AnimatedButton.AnimatedButton',
                            action: 'click',
                            event,
                            props,
                          });
                        }}
                        style={{
                          '--opacity': animatedAnimatedButton.opacity,
                          '--translateX': animatedAnimatedButton1.translateX,
                          '--translateY': \`\${props.isOn ? 30 : 0}px\`,
                          '--rotateX': \`\${props.isOn ? 20 : 10}deg\`,
                          '--rotateY': \`\${props.isOn ? 20 : 10}deg\`,
                        }}
                        className={\`views-block \${styles.AnimatedButton1}\`}
                      >
                        <span
                          data-test-id={\`AnimatedButton.Text|\${
                            props.isOn ? 'isOn|' : ''
                          }\`}
                          style={{
                            '--color': animatedText.color,
                            '--fontSize': animatedText.fontSize,
                          }}
                          className={\`views-text \${styles.Text}\`}
                        >
                          hey
                        </span>
                        {props.children}
                      </animated.button>
                    )}
                  </Spring>
                )}
              </Spring>
            )}
          </Spring>
        )}
      </TrackContext.Consumer>
    );
  }
}

export default AnimatedButton;
",
  "dependencies": Set {
    "emotion",
    "react-spring",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButtonHoverOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  AnimatedButtonHoverOnly1: css({
    label: 'AnimatedButtonHoverOnly1',
    backgroundColor: 'red',
    '&:hover': {
      backgroundColor: 'blue',
    },
    transition: 'background-color 150ms ease-out',
    willChange: 'background-color',
  }),
};

const AnimatedButtonHoverOnly = props => {
  const track = React.useContext(TrackContext);

  return (
    <button
      data-test-id={\`\${props['data-test-id'] || 'AnimatedButtonHoverOnly'}|\`}
      onClick={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({
          block: 'AnimatedButtonHoverOnly.AnimatedButtonHoverOnly',
          action: 'click',
          event,
          props,
        });
      }}
      className={\`views-block \${styles.AnimatedButtonHoverOnly1}\`}
    >
      {props.children}
    </button>
  );
};

export default AnimatedButtonHoverOnly;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AnimatedButtonScopeOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { animated, Spring } from 'react-spring';
import { css } from 'emotion';

let styles = {
  AnimatedButtonScopeOnly1: css({
    label: 'AnimatedButtonScopeOnly1',
    transition: 'opacity 150ms linear',
    willChange: 'background-color, opacity',
    backgroundColor: 'var(--backgroundColor)',
    opacity: 'var(--opacity)',
  }),
};

class AnimatedButtonScopeOnly extends React.Component {
  render() {
    const { props } = this;

    return (
      <TrackContext.Consumer>
        {track => (
          <Spring
            native
            config={{ tension: 170, friction: 26 }}
            to={{ backgroundColor: props.before ? 'blue' : 'red' }}
          >
            {animatedAnimatedButtonScopeOnly => (
              <animated.button
                data-test-id={\`\${props['data-test-id'] ||
                  'AnimatedButtonScopeOnly'}|\${props.before ? 'before|' : ''}\`}
                onClick={event => {
                  typeof props.onClick === 'function' && props.onClick(event);

                  track({
                    block: 'AnimatedButtonScopeOnly.AnimatedButtonScopeOnly',
                    action: 'click',
                    event,
                    props,
                  });
                }}
                style={{
                  '--backgroundColor':
                    animatedAnimatedButtonScopeOnly.backgroundColor,
                  '--opacity': \`\${props.before ? 1 : 1}\`,
                }}
                className={\`views-block \${styles.AnimatedButtonScopeOnly1}\`}
              >
                {props.children}
              </animated.button>
            )}
          </Spring>
        )}
      </TrackContext.Consumer>
    );
  }
}

export default AnimatedButtonScopeOnly;
",
  "dependencies": Set {
    "emotion",
    "react-spring",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom AppRegionDrag 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({
    label: 'Vertical',
    WebkitAppRegion: 'drag',
    width: '92%',
    marginTop: 'auto',
  }),
};

const AppRegionDrag = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${styles.Vertical}\`}
    >
      {props.children}
    </div>
  );
};

export default AppRegionDrag;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom BackgroundImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({
    label: 'Vertical',
    backgroundImage: \\"url('https://views.tools/image.jpg')\\",
  }),
  Horizontal: css({
    label: 'Horizontal',
    flexDirection: 'row',
    backgroundSize: 'contain',
    backgroundImage: \`url(\${'var(--backgroundImage)'})\`,
  }),
};

const BackgroundImage = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${styles.Vertical}\`}
    >
      <div
        data-test-id={\`BackgroundImage.Horizontal|\`}
        style={{ '--backgroundImage': props.backgroundImage }}
        className={\`views-block \${styles.Horizontal}\`}
      />
      {props.children}
    </div>
  );
};
BackgroundImage.defaultProps = {
  backgroundImage: 'https://views.tools/image.jpg',
};
export default BackgroundImage;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "https://views.tools/image.jpg",
      "name": "backgroundImage",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Border 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Border1: css({
    label: 'Border1',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 'var(--borderWidth)',
  }),
  Top: css({
    label: 'Top',
    borderTopStyle: 'solid',
    borderTopColor: 'red',
    borderTopWidth: 'var(--borderTopWidth)',
  }),
  Right: css({
    label: 'Right',
    borderRightStyle: 'solid',
    borderRightColor: 'red',
    borderRightWidth: 'var(--borderRightWidth)',
  }),
  Bottom: css({
    label: 'Bottom',
    borderBottomStyle: 'solid',
    borderBottomColor: 'red',
    borderBottomWidth: 'var(--borderBottomWidth)',
  }),
  Left: css({
    label: 'Left',
    borderLeftStyle: 'solid',
    borderLeftColor: 'red',
    borderLeftWidth: 'var(--borderLeftWidth)',
    borderTopRightRadius: 'var(--borderTopRightRadius)',
  }),
};

const Border = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Border'}|\`}
      style={{
        '--borderWidth':
          typeof props.borderWidth === 'number'
            ? \`\${props.borderWidth}px\`
            : props.borderWidth,
      }}
      className={\`views-block \${styles.Border1}\`}
    >
      <div
        data-test-id={\`Border.Top|\`}
        style={{
          '--borderTopWidth':
            typeof props.borderTopWidth === 'number'
              ? \`\${props.borderTopWidth}px\`
              : props.borderTopWidth,
        }}
        className={\`views-block \${styles.Top}\`}
      />
      <div
        data-test-id={\`Border.Right|\`}
        style={{
          '--borderRightWidth':
            typeof props.borderRightWidth === 'number'
              ? \`\${props.borderRightWidth}px\`
              : props.borderRightWidth,
        }}
        className={\`views-block \${styles.Right}\`}
      />
      <div
        data-test-id={\`Border.Bottom|\`}
        style={{
          '--borderBottomWidth':
            typeof props.borderBottomWidth === 'number'
              ? \`\${props.borderBottomWidth}px\`
              : props.borderBottomWidth,
        }}
        className={\`views-block \${styles.Bottom}\`}
      />
      <div
        data-test-id={\`Border.Left|\${props.something ? 'something|' : ''}\`}
        style={{
          '--borderLeftWidth':
            typeof props.borderLeftWidth === 'number'
              ? \`\${props.borderLeftWidth}px\`
              : props.borderLeftWidth,
          '--borderTopRightRadius': \`\${props.something ? 20 : 10}px\`,
        }}
        className={\`views-block \${styles.Left}\`}
      />
      {props.children}
    </div>
  );
};
Border.defaultProps = {
  borderWidth: 10,
  borderTopWidth: 10,
  borderRightWidth: 10,
  borderBottomWidth: 10,
  borderLeftWidth: 10,
};
export default Border;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 10,
      "name": "borderWidth",
      "type": "number",
    },
    Object {
      "defaultValue": 10,
      "name": "borderTopWidth",
      "type": "number",
    },
    Object {
      "defaultValue": 10,
      "name": "borderRightWidth",
      "type": "number",
    },
    Object {
      "defaultValue": 10,
      "name": "borderBottomWidth",
      "type": "number",
    },
    Object {
      "defaultValue": 10,
      "name": "borderLeftWidth",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ClassName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({ label: 'Vertical', backgroundColor: 'blue' }),
};

const ClassName = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block hey \${styles.Vertical}\`}
    >
      {props.children}
    </div>
  );
};

export default ClassName;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Code 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({ label: 'Vertical', backgroundColor: 'red' }),
  Text: css({ label: 'Text', color: 'var(--color)' }),
};

class Code extends React.Component {
  render() {
    const { props } = this;

    return (
      <TrackContext.Consumer>
        {track => (
          <div
            data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
            className={\`views-block \${styles.Vertical}\`}
          >
            <span
              data-test-id={\`Code.Text|\`}
              ref={props.refText}
              style={{ '--color': props.color }}
              className={\`views-text \${styles.Text}\`}
            >
              {props.text}
            </span>
            {props.children}
          </div>
        )}
      </TrackContext.Consumer>
    );
  }
}
Code.defaultProps = { text: 'hey', color: 'white' };
export default Code;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "hey",
      "name": "text",
      "type": "string",
    },
    Object {
      "defaultValue": "white",
      "name": "color",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "refText",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DefaultProps 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const DefaultProps = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'DefaultProps'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`DefaultProps.Text|\`} className=\\"views-text\\">
        {props.text}
      </span>
      <span data-test-id={\`DefaultProps.Text:1|\`} className=\\"views-text\\">
        {props.texto}
      </span>
      {props.children}
    </div>
  );
};
DefaultProps.defaultProps = { text: 'hey', texto: 'ho' };
export default DefaultProps;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "hey",
      "name": "text",
      "type": "string",
    },
    Object {
      "defaultValue": "ho",
      "name": "texto",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Display 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Display1: css({ label: 'Display1', display: 'block' }),
};

const Display = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Display'}|\`}
      className={\`views-block \${styles.Display1}\`}
    >
      {props.children}
    </div>
  );
};

export default Display;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DynamicCaptureType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const DynamicCaptureType = props => {
  const track = React.useContext(TrackContext);

  return (
    <input
      type={props.type}
      inputMode={
        props.type === 'number' || props.type === 'phone'
          ? 'numeric'
          : undefined
      }
      pattern={
        props.type === 'number' || props.type === 'phone' ? '[0-9]*' : undefined
      }
      data-test-id={\`\${props['data-test-id'] || 'Capture'}|\`}
      className=\\"views-capture\\"
    />
  );
};
DynamicCaptureType.defaultProps = { type: 'number' };
export default DynamicCaptureType;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "number",
      "name": "type",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DynamicFontProps 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import './Fonts/Montserrat-props.fontWeight';
import './Fonts/props.fontFamily-200';
import './Fonts/props.fontFamily-props.fontWeight';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  DynamicFamily: css({
    label: 'DynamicFamily',
    fontSize: 14,
    fontWeight: 200,
    fontFamily: 'var(--fontFamily)',
  }),
  DynamicWeight: css({
    label: 'DynamicWeight',
    fontSize: 14,
    fontFamily: 'Montserrat, sans-serif',
    fontWeight: 'var(--fontWeight)',
  }),
  DynamicFamilyAndWeight: css({
    label: 'DynamicFamilyAndWeight',
    fontSize: 14,
    fontWeight: 'var(--fontWeight)',
    fontFamily: 'var(--fontFamily)',
  }),
};

const DynamicFontProps = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`DynamicFontProps.DynamicFamily|\`}
        style={{ '--fontFamily': props.fontFamily }}
        className={\`views-text \${styles.DynamicFamily}\`}
      >
        Some text
      </span>
      <span
        data-test-id={\`DynamicFontProps.DynamicWeight|\`}
        style={{ '--fontWeight': props.fontWeight }}
        className={\`views-text \${styles.DynamicWeight}\`}
      >
        Some text
      </span>
      <span
        data-test-id={\`DynamicFontProps.DynamicFamilyAndWeight|\`}
        style={{
          '--fontWeight': props.fontWeight,
          '--fontFamily': props.fontFamily,
        }}
        className={\`views-text \${styles.DynamicFamilyAndWeight}\`}
      >
        Some text
      </span>
      {props.children}
    </div>
  );
};
DynamicFontProps.defaultProps = { fontFamily: 'Montserrat', fontWeight: 200 };
export default DynamicFontProps;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [
    Object {
      "family": "props.fontFamily",
      "id": "props.fontFamily-200",
      "style": "normal",
      "weight": "200",
    },
    Object {
      "family": "Montserrat",
      "id": "Montserrat-props.fontWeight",
      "style": "normal",
      "weight": "props.fontWeight",
    },
    Object {
      "family": "props.fontFamily",
      "id": "props.fontFamily-props.fontWeight",
      "style": "normal",
      "weight": "props.fontWeight",
    },
  ],
  "slots": Array [
    Object {
      "defaultValue": "Montserrat",
      "name": "fontFamily",
      "type": "string",
    },
    Object {
      "defaultValue": 200,
      "name": "fontWeight",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({ label: 'Vertical', height: 'var(--height)' }),
};

const DynamicStylesApplyToBasicBlocksOnly = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      style={{
        '--height':
          typeof props.height === 'number' ? \`\${props.height}px\` : props.height,
      }}
      className={\`views-block \${styles.Vertical}\`}
    >
      <SomeThing
        data-test-id={\`DynamicStylesApplyToBasicBlocksOnly.OnTop|\`}
        height={props.height}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "height",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom DynamicWidth 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({ label: 'Vertical', width: 'var(--width)' }),
};

const DynamicWidth = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      style={{
        '--width':
          typeof props.width === 'number' ? \`\${props.width}px\` : props.width,
      }}
      className={\`views-block \${styles.Vertical}\`}
    >
      {props.children}
    </div>
  );
};
DynamicWidth.defaultProps = { width: '10%' };
export default DynamicWidth;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "10%",
      "name": "width",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom EmptyText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const EmptyText = props => {
  const track = React.useContext(TrackContext);

  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'EmptyText'}|\`}
      className=\\"views-text\\"
    />
  );
};

export default EmptyText;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom FlatListPass 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  List: css({ label: 'List', overflowY: 'auto' }),
};

const FlatListPass = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'List'}|\`}
      className={\`views-block \${styles.List}\`}
    >
      {Array.isArray(props.from) &&
        props.from.map((stuff, index) => (
          <Card
            index={index}
            stuff={stuff}
            key={index}
            data-test-id={\`FlatListPass.Card|\`}
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  );
};

export default FlatListPass;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Fragment 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({ label: 'Vertical', backgroundColor: 'red' }),
  Horizontal: css({
    label: 'Horizontal',
    flexDirection: 'row',
    paddingLeft: 20,
  }),
};

const Fragment = props => {
  const track = React.useContext(TrackContext);

  return (
    <React.Fragment>
      <div
        data-test-id={\`Fragment.Vertical|\`}
        className={\`views-block \${styles.Vertical}\`}
      />
      <div
        data-test-id={\`Fragment.Horizontal|\`}
        className={\`views-block \${styles.Horizontal}\`}
      >
        <span data-test-id={\`Fragment.Text|\`} className=\\"views-text\\">
          hey
        </span>
        {props.isShown ? (
          <React.Fragment>
            <span data-test-id={\`Fragment.Text:1|\`} className=\\"views-text\\">
              hi
            </span>
          </React.Fragment>
        ) : null}
      </div>
      {props.children}
    </React.Fragment>
  );
};

export default Fragment;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "isShown",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom GoTo 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const GoTo = props => {
  const track = React.useContext(TrackContext);

  return (
    <a
      href=\\"https://views.tools\\"
      rel=\\"noopener noreferrer\\"
      target=\\"_blank\\"
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`GoTo.Text|\`} className=\\"views-text\\">
        Go to Views Tools website!
      </span>
      {props.children}
    </a>
  );
};

export default GoTo;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Hover 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Hover1: css({
    label: 'Hover1',
    '&:hover': {
      backgroundColor: '#232323',
    },
    backgroundColor: 'var(--backgroundColor)',
  }),
  Text: css({
    label: 'Text',
    color: 'white',
    [\`.\${Hover1}:hover &, .\${Hover1}.hover &\`]: {
      color: 'black',
    },
    fontSize: 'var(--fontSize)',
  }),
};

const Hover = props => {
  const track = React.useContext(TrackContext);

  return (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Hover'}|\${
        props.isStuff ? 'isStuff|' : ''
      }\`}
      onClick={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({ block: 'Hover.Hover', action: 'click', event, props });
      }}
      style={{ '--backgroundColor': \`\${props.isStuff ? 'red' : '#323232'}\` }}
      className={\`views-block \${styles.Hover1}\`}
    >
      <span
        data-test-id={\`Hover.Text|\`}
        style={{
          '--fontSize':
            typeof props.fontSize === 'number'
              ? \`\${props.fontSize}px\`
              : props.fontSize,
        }}
        className={\`views-text \${styles.Text}\`}
      >
        Hey!
      </span>
      {props.children}
    </button>
  );
};

export default Hover;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
    Object {
      "defaultValue": false,
      "name": "fontSize",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom HyphenatedProps 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import SomeViewThatExposesAlignItems from './SomeViewThatExposesAlignItems.view.js';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Content: css({ label: 'Content', alignItems: 'var(--alignItems)' }),
};

const HyphenatedProps = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className=\\"views-block\\"
    >
      <div
        data-test-id={\`HyphenatedProps.Content|\${
          props.inDesignSystem ? 'inDesignSystem|' : ''
        }\`}
        style={{
          '--alignItems': \`\${props.inDesignSystem ? 'flex-start' : 'center'}\`,
        }}
        className={\`views-block \${styles.Content}\`}
      />
      <SomeViewThatExposesAlignItems
        data-test-id={\`HyphenatedProps.SomeViewThatExposesAlignItems|\`}
        alignItems=\\"flex-start\\"
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default HyphenatedProps;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Indented 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Indented1: css({
    label: 'Indented1',
    backgroundColor: 'var(--backgroundColor)',
  }),
  Horizontal: css({
    label: 'Horizontal',
    flexDirection: 'row',
    backgroundColor: 'blue',
    paddingTop: 4,
    paddingBottom: 4,
    paddingLeft: 'var(--paddingLeft)',
    paddingRight: 'var(--paddingRight)',
  }),
};

const Indented = props => {
  const track = React.useContext(TrackContext);

  return props.stuff ? (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Indented'}|\${
        props.isSomething ? 'isSomething|' : ''
      }\`}
      style={{ '--backgroundColor': \`\${props.isSomething ? 'blue' : 'red'}\` }}
      className={\`views-block \${styles.Indented1}\`}
    >
      <span data-test-id={\`Indented.Text|\`} className=\\"views-text\\">
        hey
      </span>
      <div data-test-id={\`Indented.Vertical|\`} className=\\"views-block\\">
        <span data-test-id={\`Indented.Text:1|\`} className=\\"views-text\\">
          ho
        </span>
        {!props.showStuff ? (
          <div
            data-test-id={\`Indented.Horizontal|\${
              props.move ? 'move|' : !props.stuff ? 'notStuff|' : ''
            }\`}
            style={{
              '--paddingLeft': \`\${props.move ? 40 : 4}px\`,
              '--paddingRight': \`\${!props.stuff ? 20 : 4}px\`,
            }}
            className={\`views-block \${styles.Horizontal}\`}
          >
            <span data-test-id={\`Indented.Text:2|\`} className=\\"views-text\\">
              more
            </span>
          </div>
        ) : null}
      </div>
      {props.children}
    </div>
  ) : null;
};

export default Indented;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "stuff",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "showStuff",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom JustText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const JustText = props => {
  const track = React.useContext(TrackContext);

  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'JustText'}|\`}
      className=\\"views-text\\"
    >
      hey!
    </span>
  );
};

export default JustText;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Lazy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
let HeavyStuff = React.lazy(() => import('./HeavyStuff.view.js'));

const Lazy = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Lazy'}|\`}
      className=\\"views-block\\"
    >
      <HeavyStuff data-test-id={\`Lazy.HeavyStuff|\`} className=\\"views-block\\" />
      {props.children}
    </div>
  );
};

export default Lazy;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListOfSomething 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import Something from './Something.view.js';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  ListOfSomething1: css({
    label: 'ListOfSomething1',
    paddingLeft: 2,
    justifyContent: 'center',
    alignItems: 'flex-start',
    flexDirection: 'row',
    flexWrap: 'wrap',
    overflowY: 'auto',
    backgroundColor: 'red',
  }),
};

const ListOfSomething = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'ListOfSomething'}|\`}
      className={\`views-block \${styles.ListOfSomething1}\`}
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Something
            index={index}
            {...item}
            key={index}
            data-test-id={\`ListOfSomething.Something|\`}
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  );
};

export default ListOfSomething;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListPass 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListPass = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'List'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((stuff, index) => (
          <Card
            index={index}
            stuff={stuff}
            key={index}
            data-test-id={\`ListPass.Card|\`}
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  );
};

export default ListPass;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListWhen 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListWhen = props => {
  const track = React.useContext(TrackContext);

  return props.showMe ? (
    <div
      data-test-id={\`\${props['data-test-id'] || 'List'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card
            index={index}
            {...item}
            key={index}
            data-test-id={\`ListWhen.Card|\`}
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  ) : null;
};

export default ListWhen;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "showMe",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ListWithKey 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ListWithKey = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'List'}|\`}
      className=\\"views-block\\"
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card
            index={index}
            {...item}
            key={id}
            data-test-id={\`ListWithKey.Card|\`}
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  );
};

export default ListWithKey;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import chopperJpg from './chopper.jpg';
import garfieldPng from './garfield.png';

const LocalImage = props => {
  const track = React.useContext(TrackContext);

  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalImage'}|\${
        props.isCat ? 'isCat|' : ''
      }\`}
      alt={''}
      src={props.isCat ? garfieldPng : chopperJpg}
      className=\\"views-block\\"
    />
  );
};

export default LocalImage;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImageSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import chopperSvg from './chopper.svg';
import { css } from 'emotion';

let styles = {
  LocalImageSvg1: css({
    label: 'LocalImageSvg1',
    width: 50,
    height: 'var(--height)',
  }),
};

const LocalImageSvg = props => {
  const track = React.useContext(TrackContext);

  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalImageSvg'}|\`}
      alt={''}
      src={chopperSvg}
      style={{
        '--height':
          typeof props.height === 'number' ? \`\${props.height}px\` : props.height,
      }}
      className={\`views-block \${styles.LocalImageSvg1}\`}
    />
  );
};
LocalImageSvg.defaultProps = { height: 50 };
export default LocalImageSvg;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 50,
      "name": "height",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalImageWithDefault 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import fileJpg from 'file.jpg';

const LocalImageWithDefault = props => {
  const track = React.useContext(TrackContext);

  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalImageWithDefault'}|\`}
      alt={''}
      src={props.source}
      className=\\"views-block\\"
    />
  );
};
LocalImageWithDefault.defaultProps = { source: fileJpg };
export default LocalImageWithDefault;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "fileJpg",
      "name": "source",
      "type": "import",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const LocalOrRemoteImageWhenCode = props => {
  const track = React.useContext(TrackContext);

  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'LocalOrRemoteImageWhenCode'}|\`}
      alt={''}
      src={props.source}
      className=\\"views-block\\"
    />
  );
};
LocalOrRemoteImageWhenCode.defaultProps = {
  source: 'https://views.tools/image.jpg',
};
export default LocalOrRemoteImageWhenCode;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "https://views.tools/image.jpg",
      "name": "source",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Locals 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import LocalContainer from './LocalContainer.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { Subscribe } from 'unstated';

const TextLocal = {
  es: 'Hola',
  pl: 'Cześć',
  zhHansCN: '嗨',
};
const TextLocal1 = {
  es: 'Mas',
};
const NamedLocal = {
  es: 'Chau, \\"dijo el amigo de alguien\\"!',
};

const Locals = props => {
  const track = React.useContext(TrackContext);

  return (
    <Subscribe to={[LocalContainer]}>
      {local => (
        <div
          data-test-id={\`\${props['data-test-id'] || 'Locals'}|\`}
          className=\\"views-block\\"
        >
          <span data-test-id={\`Locals.Text|\`} className=\\"views-text\\">
            {TextLocal[local.state.lang] || 'Hi'}
          </span>
          <span data-test-id={\`Locals.Text:1|\`} className=\\"views-text\\">
            {TextLocal1[local.state.lang] || 'More'}
          </span>
          <span data-test-id={\`Locals.Named|\`} className=\\"views-text\\">
            {NamedLocal[local.state.lang] || 'Bye, \\"Said someone\\\\'s friend\\"!'}
          </span>
          {props.children}
        </div>
      )}
    </Subscribe>
  );
};

export default Locals;
",
  "dependencies": Set {
    "unstated",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom LocalsFormat 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const currencyOptions = { style: 'currency', currency: 'USD' };
const currencyFormatters = {
  en: new Intl.NumberFormat('en', currencyOptions),
  es: new Intl.NumberFormat('es', currencyOptions),
  fr: new Intl.NumberFormat('fr', currencyOptions),
};
const dateOptions = {
  weekday: 'long',
  year: 'numeric',
  month: 'numeric',
  day: '2-digit',
};
const dateFormatters = {
  en: new Intl.DateTimeFormat('en', dateOptions),
  es: new Intl.DateTimeFormat('es', dateOptions),
  fr: new Intl.DateTimeFormat('fr', dateOptions),
};
const percentOptions = { style: 'percent', maximumFractionDigits: 2 };
const percentFormatters = {
  en: new Intl.NumberFormat('en', percentOptions),
  es: new Intl.NumberFormat('es', percentOptions),
  fr: new Intl.NumberFormat('fr', percentOptions),
};
const timeOptions = {
  hour: 'numeric',
  minute: 'numeric',
  second: '2-digit',
  hour12: true,
};
const timeFormatters = {
  en: new Intl.DateTimeFormat('en', timeOptions),
  es: new Intl.DateTimeFormat('es', timeOptions),
  fr: new Intl.DateTimeFormat('fr', timeOptions),
};

const LocalsFormat = props => {
  const track = React.useContext(TrackContext);

  return (
    <Subscribe to={[LocalContainer]}>
      {local => (
        <div
          data-test-id={\`\${props['data-test-id'] || 'LocalsFormat'}|\`}
          className=\\"views-block\\"
        >
          <span data-test-id={\`LocalsFormat.Price|\`} className=\\"views-text\\">
            {currencyFormatters[local.state.lang].format(100)}
          </span>
          <span data-test-id={\`LocalsFormat.Date|\`} className=\\"views-text\\">
            {dateFormatters[local.state.lang].format(Date.parse('2018-07-08'))}
          </span>
          <span
            data-test-id={\`LocalsFormat.Percentage|\`}
            className=\\"views-text\\"
          >
            {percentFormatters[local.state.lang].format(0.805)}
          </span>
          <span data-test-id={\`LocalsFormat.Time|\`} className=\\"views-text\\">
            {timeFormatters[local.state.lang].format(
              Date.UTC(2018, 14, 3, 3, 0)
            )}
          </span>
          {props.children}
        </div>
      )}
    </Subscribe>
  );
};

export default LocalsFormat;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NameIsType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const NameIsType = props => {
  const track = React.useContext(TrackContext);

  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Texto'}|\`}
      className=\\"views-text\\"
    >
      iam
    </span>
  );
};

export default NameIsType;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NegativeNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Text: css({ label: 'Text', marginTop: -10 }),
};

const NegativeNumber = props => {
  const track = React.useContext(TrackContext);

  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className={\`views-text \${styles.Text}\`}
    >
      hey
    </span>
  );
};

export default NegativeNumber;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom NestedRoutes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import Topic from './Topic.view.js';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';

const NestedRoutes = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Topics'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`NestedRoutes.Text|\`} className=\\"views-text\\">
        topics
      </span>
      <Link
        to=\\"rendering\\"
        data-test-id={\`NestedRoutes.Link|\`}
        className=\\"views-block\\"
      >
        <span data-test-id={\`NestedRoutes.Text:1|\`} className=\\"views-text\\">
          Rendering with React
        </span>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic
            data-test-id={\`NestedRoutes.Topic|\`}
            {...routeProps}
            className=\\"views-block\\"
          />
        )}
      />
      {props.children}
    </div>
  );
};

export default NestedRoutes;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Proxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import ActionGhostedProps from './ActionGhostedProps.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Button: css({
    label: 'Button',
    alignItems: 'center',
    backgroundColor: '#f2f2f2',
    paddingBottom: 8,
    paddingLeft: 12,
    paddingRight: 12,
    paddingTop: 8,
  }),
  Text: css({
    label: 'Text',
    marginTop: 4,
    [\`.\${Button}:hover &, .\${Button}.hover &\`]: {
      color: 'fuchsia',
    },
    color: 'var(--color)',
  }),
};

const Proxy = props => {
  const track = React.useContext(TrackContext);

  return (
    <button
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\`}
      onClick={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({ block: 'Proxy.Button', action: 'click', event, props });
      }}
      className={\`views-block \${styles.Button}\`}
    >
      <props.proxyActionGhostedProps
        data-test-id={\`Proxy.ActionGhostedProps|\${
          props.isSelected ? 'isSelected|' : ''
        }\`}
        proxy={true}
        stroke={props.isSelected ? 'purple' : 'red'}
        height={props.isSelected ? 24 : 20}
        width={props.isSelected ? 24 : 20}
        className=\\"views-block\\"
      />
      <span
        data-test-id={\`Proxy.Text|\`}
        style={{ '--color': props.color }}
        className={\`views-text \${styles.Text}\`}
      >
        {props.text}
      </span>
      {props.children}
    </button>
  );
};
Proxy.defaultProps = {
  proxyActionGhostedProps: ActionGhostedProps,
  color: '#404040',
  text: 'Label',
};
export default Proxy;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
    Object {
      "defaultValue": "ActionGhostedProps",
      "name": "proxyActionGhostedProps",
      "type": "import",
    },
    Object {
      "defaultValue": "#404040",
      "name": "color",
      "type": "string",
    },
    Object {
      "defaultValue": "Label",
      "name": "text",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Scope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Scope1: css({ label: 'Scope1', color: 'var(--color)' }),
};

const Scope = props => {
  const track = React.useContext(TrackContext);

  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Scope'}|\${
        props.somethingGreen
          ? 'somethingGreen|'
          : props.whatMakesBlue
          ? 'whatMakesBlue|'
          : !props.whatMakesBlue
          ? 'notWhatMakesBlue|'
          : ''
      }\`}
      style={{
        '--color': \`\${
          props.somethingGreen
            ? 'rgb(0,255,0)'
            : props.whatMakesBlue
            ? 'rgb(0,0,255)'
            : !props.whatMakesBlue
            ? 'rgb(255,255,0)'
            : 'red'
        }\`,
      }}
      className={\`views-text \${styles.Scope1}\`}
    >
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue
        ? props.blue
        : !props.whatMakesBlue
        ? 'is Yellow'
        : '1 red'}
    </span>
  );
};

export default Scope;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopeOnCustomView 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Button from './Button.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ScopeOnCustomView = props => {
  const track = React.useContext(TrackContext);

  return (
    <Button
      data-test-id={\`\${props['data-test-id'] || 'Button'}|\${
        props.a ? 'a|' : props.b ? 'b|' : ''
      }\`}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.more : props.more}
      className=\\"views-block\\"
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "more",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const ScopePopup = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
      className=\\"views-block\\"
    >
      <button
        data-test-id={\`ScopePopup.Toggle|\${
          props.somethingGreen
            ? 'somethingGreen|'
            : props.whatMakesBlue
            ? 'whatMakesBlue|'
            : ''
        }\`}
        onClick={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue
            ? props.onClickBlue
            : props.toggle
        }
        className=\\"views-block\\"
      >
        <span data-test-id={\`ScopePopup.Text|\`} className=\\"views-text\\">
          toggle popup
        </span>
      </button>
      {props.children}
    </div>
  );
};

export default ScopePopup;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "toggle",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopePopup2 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Content: css({
    label: 'Content',
    opacity: 'var(--opacity)',
    transform: 'scale(var(--scale))',
  }),
};

const ScopePopup2 = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Popup'}|\`}
      className=\\"views-block\\"
    >
      <button
        data-test-id={\`ScopePopup2.Toggle|\`}
        onClick={event => {
          typeof props.toggle === 'function' && props.toggle(event);

          track({ block: 'ScopePopup2.Toggle', action: 'click', event, props });
        }}
        className=\\"views-block\\"
      >
        <span data-test-id={\`ScopePopup2.Text|\`} className=\\"views-text\\">
          toggle popup
        </span>
      </button>
      <div
        data-test-id={\`ScopePopup2.Content|\${
          props.isShown
            ? 'isShown|'
            : props.isSuperVisible
            ? 'isSuperVisible|'
            : ''
        }\`}
        style={{
          '--opacity': \`\${props.isShown ? 1 : props.isSuperVisible ? 3 : 0}\`,
          '--scale': \`\${props.isShown ? 1 : props.isSuperVisible ? 2 : 0}\`,
        }}
        className={\`views-block \${styles.Content}\`}
      >
        <span data-test-id={\`ScopePopup2.Text:1|\`} className=\\"views-text\\">
          I'm inside the popup
        </span>
      </div>
      {props.children}
    </div>
  );
};

export default ScopePopup2;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "toggle",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScopedShadows 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  ScopedShadows1: css({
    label: 'ScopedShadows1',
    flexDirection: 'row',
    boxShadow: '0px 5px var(--shadowBlur) 0px var(--shadowColor)',
    transition: 'box-shadow 150ms linear',
    willChange: 'box-shadow',
    shadowColor: 'var(--shadowColor)',
    shadowBlur: 'var(--shadowBlur)',
  }),
};

const ScopedShadows = props => {
  const track = React.useContext(TrackContext);

  return (
    <button
      data-test-id={\`\${props['data-test-id'] || 'ScopedShadows'}|\${
        props.isClicked ? 'isClicked|' : ''
      }\`}
      onClick={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({
          block: 'ScopedShadows.ScopedShadows',
          action: 'click',
          event,
          props,
        });
      }}
      style={{
        '--shadowColor': \`\${
          props.isClicked ? 'rgba(14, 0, 232, 0.66)' : 'rgba(232, 188, 0, 0.66)'
        }\`,
        '--shadowBlur': \`\${props.isClicked ? 10 : 20}px\`,
      }}
      className={\`views-block \${styles.ScopedShadows1}\`}
    >
      {props.children}
    </button>
  );
};

export default ScopedShadows;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ScrollableList 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  ScrollableList1: css({
    label: 'ScrollableList1',
    overflowY: 'auto',
    paddingBottom: 200,
    backgroundColor: 'red',
    paddingLeft: 'var(--paddingLeft)',
  }),
};

const ScrollableList = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'ScrollableList'}|\`}
      style={{
        '--paddingLeft':
          typeof props.paddingLeft === 'number'
            ? \`\${props.paddingLeft}px\`
            : props.paddingLeft,
      }}
      className={\`views-block \${styles.ScrollableList1}\`}
    >
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card
            index={index}
            {...item}
            key={index}
            data-test-id={\`ScrollableList.Card|\`}
            className=\\"views-block\\"
          />
        ))}
      {props.children}
    </div>
  );
};

export default ScrollableList;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
    Object {
      "defaultValue": false,
      "name": "paddingLeft",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Shadow 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  BoxShadow: css({
    label: 'BoxShadow',
    boxShadow: \`0px 5px 2px 2px var(--shadowColor)\`,
  }),
  TextShadow: css({
    label: 'TextShadow',
    textShadow: \`2px 3px 1px var(--shadowColor)\`,
  }),
};

const Shadow = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Shadow'}|\`}
      className=\\"views-block\\"
    >
      <div
        data-test-id={\`Shadow.BoxShadow|\`}
        style={{ '--shadowColor': props.shadowColor }}
        className={\`views-block \${styles.BoxShadow}\`}
      >
        <span
          data-test-id={\`Shadow.TextShadow|\`}
          style={{ '--shadowColor': props.shadowColor }}
          className={\`views-text \${styles.TextShadow}\`}
        >
          hey
        </span>
      </div>
      {props.children}
    </div>
  );
};
Shadow.defaultProps = { shadowColor: 'red' };
export default Shadow;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "red",
      "name": "shadowColor",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom SlotOnBaseAndValueOnScope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  SlotOnBaseAndValueOnScope1: css({
    label: 'SlotOnBaseAndValueOnScope1',
    color: 'var(--color)',
  }),
};

const SlotOnBaseAndValueOnScope = props => {
  const track = React.useContext(TrackContext);

  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'SlotOnBaseAndValueOnScope'}|\${
        props.something ? 'something|' : ''
      }\`}
      style={{ '--color': \`\${props.something ? 'blue' : props.color}\` }}
      className={\`views-text \${styles.SlotOnBaseAndValueOnScope1}\`}
    />
  );
};

export default SlotOnBaseAndValueOnScope;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "color",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom SomeMissingStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  WindowControl: css({
    label: 'WindowControl',
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: 'scale(1.1)',
    transition: 'all 0.15s ease-out',
    width: 10,
    height: 10,
    '&:hover': {
      transform: 'scale(1.1)',
    },
    '&:hover': {
      backgroundColor: 'var(--backgroundColor)',
    },
  }),
};

const SomeMissingStyle = props => {
  const track = React.useContext(TrackContext);

  return (
    <button
      data-test-id={\`\${props['data-test-id'] || 'WindowControl'}|\`}
      onClick={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({
          block: 'SomeMissingStyle.WindowControl',
          action: 'click',
          event,
          props,
        });
      }}
      tabIndex={-1}
      style={{ '--backgroundColor': props.backgroundColorHover }}
      className={\`views-block \${styles.WindowControl}\`}
    >
      {props.children}
    </button>
  );
};

export default SomeMissingStyle;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Teleport 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { Link } from 'react-router-dom';
import { css } from 'emotion';

let styles = {
  Horizontal: css({ label: 'Horizontal', flexDirection: 'row' }),
};

const Teleport = props => {
  const track = React.useContext(TrackContext);

  return (
    <Link
      to=\\"..\\"
      data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
      className={\`views-block \${styles.Horizontal}\`}
    >
      <span data-test-id={\`Teleport.Text|\`} className=\\"views-text\\">
        go back
      </span>
      {props.children}
    </Link>
  );
};

export default Teleport;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom TestIds 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import External from './External.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const TestIds = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className=\\"views-block\\"
    >
      <span data-test-id={\`TestIds.Text|\`} className=\\"views-text\\">
        1
      </span>
      <span data-test-id={\`TestIds.Text:1|\`} className=\\"views-text\\">
        2
      </span>
      <External data-test-id={\`TestIds.External|\`} className=\\"views-block\\" />
      <span data-test-id={\`TestIds.Name|\`} className=\\"views-text\\">
        name
      </span>
      {props.children}
    </div>
  );
};

export default TestIds;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom Transform 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Transform1: css({
    label: 'Transform1',
    transform:
      'rotate(4deg) rotateX(5deg) rotateY(6deg) scale(3) translateX(1px) translateY(2px)',
    transformOrigin: 'center top',
  }),
  Text: css({
    label: 'Text',
    transformOrigin: \`var(--transformOriginX) var(--transformOriginY)\`,
  }),
};

const Transform = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Transform'}|\`}
      className={\`views-block \${styles.Transform1}\`}
    >
      <span
        data-test-id={\`Transform.Text|\`}
        style={{
          '--transformOriginX': props.transformOriginX,
          '--transformOriginY': props.transformOriginY,
        }}
        className={\`views-text \${styles.Text}\`}
      >
        who knows what happens here :D
      </span>
      {props.children}
    </div>
  );
};

export default Transform;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "transformOriginX",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "transformOriginY",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureEmail 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Email: css({
    label: 'Email',
    borderColor: 'black',
    borderStyle: 'solid',
    borderWidth: 1,
    color: 'red',
    '&:focus': {
      color: 'purple',
    },
    '&::placeholder': {
      color: 'blue',
    },
  }),
};

const UseCaptureEmail = props => {
  const track = React.useContext(TrackContext);

  return (
    <input
      type=\\"email\\"
      data-test-id={\`\${props['data-test-id'] || 'Email'}|\`}
      autoFocus={true}
      defaultValue=\\"hey this is a default value\\"
      onSubmit={props.onSubmit}
      className={\`views-capture \${styles.Email}\`}
    />
  );
};

export default UseCaptureEmail;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onSubmit",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureFile 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseCaptureFile = props => {
  const track = React.useContext(TrackContext);

  return (
    <input
      type=\\"file\\"
      data-test-id={\`\${props['data-test-id'] || 'File'}|\`}
      className=\\"views-capture\\"
    />
  );
};

export default UseCaptureFile;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseCaptureNumber = props => {
  const track = React.useContext(TrackContext);

  return (
    <input
      type=\\"number\\"
      inputMode=\\"numeric\\"
      pattern=\\"[0-9]*\\"
      data-test-id={\`\${props['data-test-id'] || 'Number'}|\`}
      className=\\"views-capture\\"
    />
  );
};

export default UseCaptureNumber;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCapturePhone 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseCapturePhone = props => {
  const track = React.useContext(TrackContext);

  return (
    <input
      type=\\"tel\\"
      inputMode=\\"numeric\\"
      pattern=\\"[0-9]*\\"
      data-test-id={\`\${props['data-test-id'] || 'Phone'}|\`}
      className=\\"views-capture\\"
    />
  );
};

export default UseCapturePhone;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureSecure 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseCaptureSecure = props => {
  const track = React.useContext(TrackContext);

  return (
    <input
      type=\\"password\\"
      data-test-id={\`\${props['data-test-id'] || 'Secure'}|\`}
      className=\\"views-capture\\"
    />
  );
};

export default UseCaptureSecure;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import LocalContainer from './LocalContainer.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { Subscribe } from 'unstated';

const TextLocal = {
  es: 'Escriba sus comentarios aqui...',
};

const UseCaptureText = props => {
  const track = React.useContext(TrackContext);

  return (
    <Subscribe to={[LocalContainer]}>
      {local => (
        <input
          type=\\"text\\"
          data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
          placeholder={TextLocal[local.state.lang] || 'Type feedback here...'}
          className=\\"views-capture\\"
        />
      )}
    </Subscribe>
  );
};

export default UseCaptureText;
",
  "dependencies": Set {
    "unstated",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextArea 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseCaptureTextArea = props => {
  const track = React.useContext(TrackContext);

  return (
    <textarea
      data-test-id={\`\${props['data-test-id'] || 'CaptureTextArea'}|\`}
      className=\\"views-capture\\"
    />
  );
};

export default UseCaptureTextArea;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseCaptureTextManagedFromOutside = props => {
  const track = React.useContext(TrackContext);

  return (
    <input
      type=\\"text\\"
      data-test-id={\`\${props['data-test-id'] || 'Capture'}|\`}
      value={props.external}
      className=\\"views-capture\\"
    />
  );
};

export default UseCaptureTextManagedFromOutside;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "external",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseHorizontal 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Horizontal: css({
    label: 'Horizontal',
    flexDirection: 'row',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  }),
};

const UseHorizontal = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
      className={\`views-block \${styles.Horizontal}\`}
    >
      {props.children}
    </div>
  );
};

export default UseHorizontal;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseImage = props => {
  const track = React.useContext(TrackContext);

  return (
    <img
      data-test-id={\`\${props['data-test-id'] || 'Image'}|\${
        props.another ? 'another|' : ''
      }\`}
      alt={''}
      src={
        props.another
          ? 'https://views.tools/hi.jpg'
          : 'https://views.tools/rocks.jpg'
      }
      className=\\"views-block\\"
    />
  );
};

export default UseImage;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import AnotherIcon from './AnotherIcon.view.js';
import Button from './Button.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const UseProxy = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'UseProxy'}|\`}
      className=\\"views-block\\"
    >
      <Button
        proxyActionGhostedProps={AnotherIcon}
        data-test-id={\`UseProxy.Button|\`}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default UseProxy;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseRouter 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import About from './About.view.js';
import Home from './Home.view.js';
import React from 'react';
import Topics from './Topics.view.js';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { BrowserRouter as Router } from 'react-router-dom';
import { Route } from 'react-router-dom';
import { css } from 'emotion';

let styles = {
  Horizontal: css({ label: 'Horizontal', flexDirection: 'row' }),
};

const UseRouter = props => {
  const track = React.useContext(TrackContext);

  return (
    <Router>
      <div
        data-test-id={\`\${props['data-test-id'] || 'Horizontal'}|\`}
        className={\`views-block \${styles.Horizontal}\`}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              data-test-id={\`UseRouter.Home|\`}
              height={props.height}
              width={360}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About
              data-test-id={\`UseRouter.About|\`}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics
              data-test-id={\`UseRouter.Topics|\`}
              {...routeProps}
              className=\\"views-block\\"
            />
          )}
        />
        {props.children}
      </div>
    </Router>
  );
};
UseRouter.defaultProps = { height: 10 };
export default UseRouter;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 10,
      "name": "height",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Svg: css({ label: 'Svg', height: 20, width: 20, opacity: 'var(--opacity)' }),
  SvgPath: css({ label: 'SvgPath', fill: 'red' }),
};

const UseSvg = props => {
  const track = React.useContext(TrackContext);

  return (
    <svg
      data-test-id={\`\${props['data-test-id'] || 'Svg'}|\`}
      viewBox=\\"0 0 20 20\\"
      style={{ '--opacity': props.opacity }}
      className={\`views-block \${styles.Svg}\`}
    >
      <path
        data-test-id={\`UseSvg.SvgPath|\`}
        d=\\"0 20\\"
        className={\`views-block \${styles.SvgPath}\`}
      />
      <circle
        data-test-id={\`UseSvg.SvgCircle|\`}
        cx={10}
        cy={5}
        r={5}
        className=\\"views-block\\"
      />
      <g
        data-test-id={\`UseSvg.SvgGroup|\`}
        transform=\\"translate(6.000000, 5.000000)\\"
        className=\\"views-block\\"
      >
        <path
          data-test-id={\`UseSvg.SvgPath:1|\`}
          d={1}
          className=\\"views-block\\"
        />
        <path
          data-test-id={\`UseSvg.SvgPath:2|\`}
          d={2}
          className=\\"views-block\\"
        />
      </g>
      <text
        data-test-id={\`UseSvg.SvgText|\`}
        text=\\"hey\\"
        className=\\"views-block\\"
      />
      {props.children}
    </svg>
  );
};
UseSvg.defaultProps = { opacity: 0.5 };
export default UseSvg;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 0.5,
      "name": "opacity",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseTable 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Cell from './Cell.view.js';
import Column from './Column.view.js';
import Header from './Header.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { AutoSizer, Column, Table } from '@viewstools/tables/dom';

let styles = {
  Table1Row: css({
    display: 'flex',
    color: '#1C1C1C',
    backgroundColor: 'white',
    '&:hover': {
      color: 'red',
      backgroundColor: 'black',
    },
    '&:nth-child(even)': {
      backgroundColor: 'black',
      '&:hover': {
        color: 'green',
      },
      color: 'var(--rowColorAlternate)',
      '&:hover': {
        backgroundColor: 'var(--rowBackgroundColorAlternate)',
      },
    },
  }),
};

const UseTable = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'UseTable'}|\`}
      className=\\"views-block\\"
    >
      <AutoSizer>
        {({ width, height }) => (
          <Table
            width={width}
            height={height}
            rowCount={Array.isArray(props.from) ? props.from.length : 0}
            rowGetter={({ index }) => props.from[index]}
            data-test-id={\`UseTable.Table|\`}
            headerHeight={40}
            rowHeight={20}
            rowClassName={styles.Table1Row}
            className=\\"views-block\\"
          >
            <Column
              dataKey=\\"name\\"
              width={90}
              headerRenderer={headerProps => (
                <Header {...headerProps} text=\\"Name\\" />
              )}
              cellRenderer={cellProps => <Cell {...cellProps} />}
              data-test-id={\`UseTable.Name|\`}
              key=\\"name\\"
              className=\\"views-block\\"
            />
            <Column
              dataKey=\\"location\\"
              width={(width - 90) / 2}
              cellRenderer={cellProps => <Cell {...cellProps} />}
              data-test-id={\`UseTable.Location|\`}
              key=\\"location\\"
              className=\\"views-block\\"
            />
            <Column
              dataKey=\\"description\\"
              width={(width - 90) / 2}
              cellRenderer={cellProps => <Cell {...cellProps} />}
              data-test-id={\`UseTable.Description|\`}
              key=\\"description\\"
              className=\\"views-block\\"
            />
          </Table>
        )}
      </AutoSizer>
      {props.children}
    </div>
  );
};

export default UseTable;
",
  "dependencies": Set {
    "@viewstools/tables",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "rowColorAlternate",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseTableOnWhen 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Cell from './Cell.view.js';
import Column from './Column.view.js';
import Header from './Header.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { AutoSizer, Column, Table } from '@viewstools/tables/dom';
import { css } from 'emotion';

let styles = {
  Table1Row: css({
    display: 'flex',
    color: '#1C1C1C',
    backgroundColor: 'white',
    '&:hover': {
      color: 'red',
      backgroundColor: 'black',
    },
    '&:nth-child(even)': {
      backgroundColor: 'black',
      '&:hover': {
        color: 'green',
      },
      color: 'var(--rowColorAlternate)',
      '&:hover': {
        backgroundColor: 'var(--rowBackgroundColorAlternate)',
      },
    },
  }),
  Table1: css({ label: 'Table1', marginLeft: 'var(--marginLeft)' }),
  Name: css({
    label: 'Name',
    borderBottomStyle: 'solid',
    borderBottomWidth: 1,
    borderBottomColor: 'var(--borderBottomColor)',
  }),
};

const UseTableOnWhen = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'UseTableOnWhen'}|\`}
      className=\\"views-block\\"
    >
      {props.stuff ? (
        <AutoSizer>
          {({ width, height }) => (
            <Table
              width={width}
              height={height}
              rowCount={Array.isArray(props.from) ? props.from.length : 0}
              rowGetter={({ index }) => props.from[index]}
              data-test-id={\`UseTableOnWhen.Table|\`}
              headerHeight={40}
              rowHeight={20}
              rowClassName={styles.Table1Row}
              style={{
                '--marginLeft':
                  typeof props.marginLeft === 'number'
                    ? \`\${props.marginLeft}px\`
                    : props.marginLeft,
                '--rowColorAlternate': props.rowColorAlternate,
                '--rowBackgroundColorAlternate': props.rowBgColorAlternate,
              }}
              className={\`views-block \${styles.Table1}\`}
            >
              <Column
                dataKey=\\"name\\"
                width={90}
                headerRenderer={headerProps => (
                  <Header {...headerProps} text=\\"Name\\" />
                )}
                cellRenderer={cellProps => <Cell {...cellProps} />}
                data-test-id={\`UseTableOnWhen.Name|\`}
                key=\\"name\\"
                style={{ '--borderBottomColor': props.borderColor }}
                className={\`views-block \${styles.Name}\`}
              />
            </Table>
          )}
        </AutoSizer>
      ) : null}
      {props.children}
    </div>
  );
};

export default UseTableOnWhen;
",
  "dependencies": Set {
    "emotion",
    "@viewstools/tables",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "stuff",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "marginLeft",
      "type": "number",
    },
    Object {
      "defaultValue": false,
      "name": "rowColorAlternate",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "borderColor",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import './Fonts/Montserrat-300';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  UseText1: css({
    label: 'UseText1',
    fontFamily: 'Montserrat, sans-serif',
    fontSize: 16,
    lineHeight: 1.5,
    fontWeight: 300,
    color: 'var(--color)',
  }),
};

const UseText = props => {
  const track = React.useContext(TrackContext);

  return (
    <span
      data-test-id={\`\${props['data-test-id'] || 'UseText'}|\${
        props.isSomething ? 'isSomething|' : ''
      }\`}
      style={{ '--color': \`\${props.isSomething ? 'red' : 'blue'}\` }}
      className={\`views-text \${styles.UseText1}\`}
    >
      Hi, I'm some text
    </span>
  );
};

export default UseText;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseTextCustomFont 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import './Fonts/CustomFontNotOnGoogle-300';
import './Fonts/CustomFontNotOnGoogle-400-italic';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Normal: css({
    label: 'Normal',
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle',
    fontSize: 16,
    lineHeight: 1.5,
    fontWeight: 300,
  }),
  Italic: css({
    label: 'Italic',
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle',
    fontStyle: 'italic',
    fontSize: 16,
    lineHeight: 1.5,
    fontWeight: 400,
  }),
};

const UseTextCustomFont = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'UseTextCustomFont'}|\`}
      className=\\"views-block\\"
    >
      <span
        data-test-id={\`UseTextCustomFont.Normal|\`}
        fontType=\\"sans-serif\\"
        className={\`views-text \${styles.Normal}\`}
      >
        Hi, I'm some text
      </span>
      <span
        data-test-id={\`UseTextCustomFont.Italic|\`}
        fontType=\\"sans-serif\\"
        className={\`views-text \${styles.Italic}\`}
      >
        Hi, I'm some text
      </span>
      {props.children}
    </div>
  );
};

export default UseTextCustomFont;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom UseVertical 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Vertical: css({ label: 'Vertical', backgroundColor: 'red' }),
};

const UseVertical = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'Vertical'}|\`}
      className={\`views-block \${styles.Vertical}\`}
    >
      {props.children}
    </div>
  );
};

export default UseVertical;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ViewAndBlockSameName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Button from './Button.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  Button: css({ label: 'Button', backgroundColor: 'red' }),
};

const ViewAndBlockSameName = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className=\\"views-block\\"
    >
      <div
        data-test-id={\`ViewAndBlockSameName.Button|\`}
        className={\`views-block \${styles.Button}\`}
      />
      <Button
        data-test-id={\`ViewAndBlockSameName.Thing|\`}
        className=\\"views-block\\"
      />
      {props.children}
    </div>
  );
};

export default ViewAndBlockSameName;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  ViewNameIsntUsedInStyle1: css({
    label: 'ViewNameIsntUsedInStyle1',
    zIndex: 5,
    opacity: 'var(--opacity)',
  }),
};

const ViewNameIsntUsedInStyle = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'ViewNameIsntUsedInStyle'}|\`}
      style={{ '--opacity': props.opacity }}
      className={\`views-block \${styles.ViewNameIsntUsedInStyle1}\`}
    >
      {props.children}
    </div>
  );
};
ViewNameIsntUsedInStyle.defaultProps = { opacity: 1 };
export default ViewNameIsntUsedInStyle;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 1,
      "name": "opacity",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom When 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';
import { css } from 'emotion';

let styles = {
  App: css({ label: 'App', flexDirection: 'row' }),
};

const When = props => {
  const track = React.useContext(TrackContext);

  return (
    <div
      data-test-id={\`\${props['data-test-id'] || 'App'}|\`}
      className={\`views-block \${styles.App}\`}
    >
      {props.showMe ? (
        <span data-test-id={\`When.Text|\`} className=\\"views-text\\">
          I may be hidden
        </span>
      ) : null}
      {props.children}
    </div>
  );
};

export default When;
",
  "dependencies": Set {
    "emotion",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "showMe",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-dom parses react-dom WhenTopLevel 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import ViewsBaseCss from './ViewsBaseCss.view.js';

const WhenTopLevel = props => {
  const track = React.useContext(TrackContext);

  return props.showMe ? (
    <span
      data-test-id={\`\${props['data-test-id'] || 'Text'}|\`}
      className=\\"views-text\\"
    >
      I may be hidden
    </span>
  ) : null;
};

export default WhenTopLevel;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "showMe",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Action 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import SubButton from './SubButton.view.js';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';

let styles = StyleSheet.create({ Vertical: { color: 'red' } });

const Action = props => {
  const track = React.useContext(TrackContext);

  return props.check ? (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({ block: 'Action.Vertical', action: 'click', event, props });
      }}
      disabled={props.isDisabled}
      underlayColor=\\"transparent\\"
    >
      <View
        testID={\`\${props['testID'] || 'Vertical'}|\`}
        style={styles.Vertical}
      >
        <Text testID={\`Action.Text|\`}>click me</Text>
        <SubButton testID={\`Action.SubButton|\`} isDisabled={true} />
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  ) : null;
};

export default Action;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "check",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
    Object {
      "defaultValue": false,
      "name": "isDisabled",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AnimatedButton 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import * as Easing from 'd3-ease';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
import { animated, Spring } from 'react-spring';
let AnimatedText = animated(Text);
let AnimatedView = animated(View);

let styles = StyleSheet.create({ AnimatedButton1: { backgroundColor: 'red' } });

class AnimatedButton extends React.Component {
  render() {
    const { props } = this;

    return (
      <TrackContext.Consumer>
        {track => (
          <Spring
            native
            config={{ friction: 10, tension: 1 }}
            to={{ opacity: props.isOn ? 1 : 0.75 }}
          >
            {animatedAnimatedButton => (
              <Spring
                native
                config={{ friction: 15, tension: 2 }}
                to={{ translateX: props.isOn ? 20 : 10 }}
              >
                {animatedAnimatedButton1 => (
                  <Spring
                    native
                    easing={Easing.easeCubicIn}
                    config={{ duration: 150 }}
                    to={{ rotateX: props.isOn ? 20 : 10 }}
                  >
                    {animatedAnimatedButton2 => (
                      <Spring
                        native
                        easing={Easing.easeCubicInOut}
                        config={{ duration: 150 }}
                        to={{ rotateY: props.isOn ? 20 : 10 }}
                      >
                        {animatedAnimatedButton3 => (
                          <Spring
                            native
                            config={{ tension: 170, friction: 26 }}
                            to={{
                              color: props.isOn ? 'blue' : 'red',
                              fontSize: props.isOn ? 18 : 12,
                            }}
                          >
                            {animatedText => (
                              <TouchableWithoutFeedback
                                activeOpacity={0.7}
                                onPress={event => {
                                  typeof props.onClick === 'function' &&
                                    props.onClick(event);

                                  track({
                                    block: 'AnimatedButton.AnimatedButton',
                                    action: 'click',
                                    event,
                                    props,
                                  });
                                }}
                                underlayColor=\\"transparent\\"
                              >
                                <AnimatedView
                                  testID={\`\${props['testID'] ||
                                    'AnimatedButton'}|\${
                                    props.isOn ? 'isOn|' : ''
                                  }\`}
                                  style={{
                                    ...styles.AnimatedButton1,
                                    opacity: animatedAnimatedButton.opacity,
                                    transform: [
                                      {
                                        translateX:
                                          animatedAnimatedButton1.translateX,
                                      },
                                      {
                                        rotateX:
                                          animatedAnimatedButton2.rotateX,
                                      },
                                      {
                                        rotateY:
                                          animatedAnimatedButton3.rotateY,
                                      },
                                    ],
                                  }}
                                >
                                  <AnimatedText
                                    testID={\`AnimatedButton.Text|\${
                                      props.isOn ? 'isOn|' : ''
                                    }\`}
                                    style={{
                                      ...null,
                                      color: animatedText.color,
                                      fontSize: animatedText.fontSize,
                                    }}
                                  >
                                    hey
                                  </AnimatedText>
                                  {props.children}
                                </AnimatedView>
                              </TouchableWithoutFeedback>
                            )}
                          </Spring>
                        )}
                      </Spring>
                    )}
                  </Spring>
                )}
              </Spring>
            )}
          </Spring>
        )}
      </TrackContext.Consumer>
    );
  }
}

export default AnimatedButton;
",
  "dependencies": Set {
    "react-spring",
    "d3-ease",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AnimatedButtonHoverOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import * as Easing from 'd3-ease';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, TouchableWithoutFeedback, View } from 'react-native';
import { animated, Spring } from 'react-spring';
let AnimatedView = animated(View);

let styles = StyleSheet.create({
  AnimatedButtonHoverOnly1: { backgroundColor: 'red' },
});

class AnimatedButtonHoverOnly extends React.Component {
  render() {
    const { props } = this;

    return (
      <TrackContext.Consumer>
        {track => (
          <Spring
            native
            easing={Easing.easeCubicOut}
            config={{ duration: 150 }}
            to={{ backgroundColor: props.isHovered ? 'blue' : 'red' }}
          >
            {animatedAnimatedButtonHoverOnly => (
              <TouchableWithoutFeedback
                activeOpacity={0.7}
                onPress={event => {
                  typeof props.onClick === 'function' && props.onClick(event);

                  track({
                    block: 'AnimatedButtonHoverOnly.AnimatedButtonHoverOnly',
                    action: 'click',
                    event,
                    props,
                  });
                }}
                underlayColor=\\"transparent\\"
              >
                <AnimatedView
                  testID={\`\${props['testID'] || 'AnimatedButtonHoverOnly'}|\`}
                  style={{
                    ...styles.AnimatedButtonHoverOnly1,
                    backgroundColor:
                      animatedAnimatedButtonHoverOnly.backgroundColor,
                  }}
                >
                  {props.children}
                </AnimatedView>
              </TouchableWithoutFeedback>
            )}
          </Spring>
        )}
      </TrackContext.Consumer>
    );
  }
}

export default AnimatedButtonHoverOnly;
",
  "dependencies": Set {
    "react-spring",
    "d3-ease",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AnimatedButtonScopeOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import * as Easing from 'd3-ease';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { TouchableWithoutFeedback, View } from 'react-native';
import { animated, Spring } from 'react-spring';
let AnimatedView = animated(View);

class AnimatedButtonScopeOnly extends React.Component {
  render() {
    const { props } = this;

    return (
      <TrackContext.Consumer>
        {track => (
          <Spring
            native
            config={{ tension: 170, friction: 26 }}
            to={{ backgroundColor: props.before ? 'blue' : 'red' }}
          >
            {animatedAnimatedButtonScopeOnly => (
              <Spring
                native
                config={{ duration: 150 }}
                to={{ opacity: props.before ? 1 : 1 }}
              >
                {animatedAnimatedButtonScopeOnly1 => (
                  <TouchableWithoutFeedback
                    activeOpacity={0.7}
                    onPress={event => {
                      typeof props.onClick === 'function' &&
                        props.onClick(event);

                      track({
                        block:
                          'AnimatedButtonScopeOnly.AnimatedButtonScopeOnly',
                        action: 'click',
                        event,
                        props,
                      });
                    }}
                    underlayColor=\\"transparent\\"
                  >
                    <AnimatedView
                      testID={\`\${props['testID'] ||
                        'AnimatedButtonScopeOnly'}|\${
                        props.before ? 'before|' : ''
                      }\`}
                      style={{
                        ...null,
                        backgroundColor:
                          animatedAnimatedButtonScopeOnly.backgroundColor,
                        opacity: animatedAnimatedButtonScopeOnly1.opacity,
                      }}
                    >
                      {props.children}
                    </AnimatedView>
                  </TouchableWithoutFeedback>
                )}
              </Spring>
            )}
          </Spring>
        )}
      </TrackContext.Consumer>
    );
  }
}

export default AnimatedButtonScopeOnly;
",
  "dependencies": Set {
    "react-spring",
    "d3-ease",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native AppRegionDrag 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({
  Vertical: { width: '92%', marginTop: 'auto' },
});

const AppRegionDrag = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.Vertical}>
      {props.children}
    </View>
  );
};

export default AppRegionDrag;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native BackgroundImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Image, StyleSheet } from 'react-native';

let styles = StyleSheet.create({ Horizontal: { flexDirection: 'row' } });

const BackgroundImage = props => {
  const track = React.useContext(TrackContext);

  return (
    <Image
      resizeMode=\\"cover\\"
      source={{ uri: 'https://views.tools/image.jpg' }}
      testID={\`\${props['testID'] || 'Vertical'}|\`}
    >
      <Image
        resizeMode={undefined}
        source={{ uri: props.backgroundImage }}
        testID={\`BackgroundImage.Horizontal|\`}
        style={styles.Horizontal}
      />
      {props.children}
    </Image>
  );
};
BackgroundImage.defaultProps = {
  backgroundImage: 'https://views.tools/image.jpg',
};
export default BackgroundImage;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "https://views.tools/image.jpg",
      "name": "backgroundImage",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Border 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({
  Border1: { borderColor: 'red', borderStyle: 'solid' },
  Top: { borderStyle: 'solid', borderTopColor: 'red' },
  Right: { borderStyle: 'solid', borderRightColor: 'red' },
  Bottom: { borderStyle: 'solid', borderBottomColor: 'red' },
  Left: { borderStyle: 'solid', borderLeftColor: 'red' },
});

const Border = props => {
  const track = React.useContext(TrackContext);

  return (
    <View
      testID={\`\${props['testID'] || 'Border'}|\`}
      style={[styles.Border1, { borderWidth: props.borderWidth }]}
    >
      <View
        testID={\`Border.Top|\`}
        style={[styles.Top, { borderTopWidth: props.borderTopWidth }]}
      />
      <View
        testID={\`Border.Right|\`}
        style={[styles.Right, { borderRightWidth: props.borderRightWidth }]}
      />
      <View
        testID={\`Border.Bottom|\`}
        style={[styles.Bottom, { borderBottomWidth: props.borderBottomWidth }]}
      />
      <View
        testID={\`Border.Left|\${props.something ? 'something|' : ''}\`}
        style={[
          styles.Left,
          {
            borderLeftWidth: props.borderLeftWidth,
            borderTopRightRadius: props.something ? 20 : 10,
          },
        ]}
      />
      {props.children}
    </View>
  );
};
Border.defaultProps = {
  borderWidth: 10,
  borderTopWidth: 10,
  borderRightWidth: 10,
  borderBottomWidth: 10,
  borderLeftWidth: 10,
};
export default Border;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 10,
      "name": "borderWidth",
      "type": "number",
    },
    Object {
      "defaultValue": 10,
      "name": "borderTopWidth",
      "type": "number",
    },
    Object {
      "defaultValue": 10,
      "name": "borderRightWidth",
      "type": "number",
    },
    Object {
      "defaultValue": 10,
      "name": "borderBottomWidth",
      "type": "number",
    },
    Object {
      "defaultValue": 10,
      "name": "borderLeftWidth",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ClassName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({ Vertical: { backgroundColor: 'blue' } });

const ClassName = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.Vertical}>
      {props.children}
    </View>
  );
};

export default ClassName;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Code 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({ Vertical: { backgroundColor: 'red' } });

class Code extends React.Component {
  render() {
    const { props } = this;

    return (
      <TrackContext.Consumer>
        {track => (
          <View
            testID={\`\${props['testID'] || 'Vertical'}|\`}
            style={styles.Vertical}
          >
            <Text
              testID={\`Code.Text|\`}
              ref={props.refText}
              style={[null, { color: props.color }]}
            >
              {props.text}
            </Text>
            {props.children}
          </View>
        )}
      </TrackContext.Consumer>
    );
  }
}
Code.defaultProps = { text: 'hey', color: 'white' };
export default Code;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "hey",
      "name": "text",
      "type": "string",
    },
    Object {
      "defaultValue": "white",
      "name": "color",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "refText",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native DefaultProps 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text, View } from 'react-native';

const DefaultProps = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'DefaultProps'}|\`}>
      <Text testID={\`DefaultProps.Text|\`}>{props.text}</Text>
      <Text testID={\`DefaultProps.Text:1|\`}>{props.texto}</Text>
      {props.children}
    </View>
  );
};
DefaultProps.defaultProps = { text: 'hey', texto: 'ho' };
export default DefaultProps;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "hey",
      "name": "text",
      "type": "string",
    },
    Object {
      "defaultValue": "ho",
      "name": "texto",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Display 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({ Display1: { display: 'block' } });

const Display = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Display'}|\`} style={styles.Display1}>
      {props.children}
    </View>
  );
};

export default Display;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native DynamicCaptureType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { TextInput } from 'react-native';

const DynamicCaptureType = props => {
  const track = React.useContext(TrackContext);

  return (
    <TextInput
      keyboardType={
        props.type === 'email'
          ? 'email-address'
          : props.type === 'number'
          ? 'numeric'
          : props.type === 'phone'
          ? 'phone-pad'
          : 'default'
      }
      autoCorrect={false}
      underlineColorAndroid=\\"transparent\\"
      textAlignVertical=\\"top\\"
      testID={\`\${props['testID'] || 'Capture'}|\`}
    />
  );
};
DynamicCaptureType.defaultProps = { type: 'number' };
export default DynamicCaptureType;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "number",
      "name": "type",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native DynamicFontProps 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({
  DynamicFamily: { fontSize: 14 },
  DynamicWeight: {
    fontSize: 14,
    fontFamily: '\`Montserrat-\${props.fontWeight}\`',
  },
  DynamicFamilyAndWeight: { fontSize: 14 },
});

const DynamicFontProps = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'App'}|\`}>
      <Text
        testID={\`DynamicFontProps.DynamicFamily|\`}
        style={[
          styles.DynamicFamily,
          { fontFamily: \`\${props.fontFamily}-200\` },
        ]}
      >
        Some text
      </Text>
      <Text
        testID={\`DynamicFontProps.DynamicWeight|\`}
        style={styles.DynamicWeight}
      >
        Some text
      </Text>
      <Text
        testID={\`DynamicFontProps.DynamicFamilyAndWeight|\`}
        style={[
          styles.DynamicFamilyAndWeight,
          { fontFamily: \`\${props.fontFamily}-\${props.fontWeight}\` },
        ]}
      >
        Some text
      </Text>
      {props.children}
    </View>
  );
};
DynamicFontProps.defaultProps = { fontFamily: 'Montserrat', fontWeight: 200 };
export default DynamicFontProps;
",
  "dependencies": Set {},
  "fonts": Array [
    Object {
      "family": "props.fontFamily",
      "id": "props.fontFamily-200",
      "style": "normal",
      "weight": "200",
    },
    Object {
      "family": "Montserrat",
      "id": "Montserrat-props.fontWeight",
      "style": "normal",
      "weight": "props.fontWeight",
    },
    Object {
      "family": "props.fontFamily",
      "id": "props.fontFamily-props.fontWeight",
      "style": "normal",
      "weight": "props.fontWeight",
    },
  ],
  "slots": Array [
    Object {
      "defaultValue": "Montserrat",
      "name": "fontFamily",
      "type": "string",
    },
    Object {
      "defaultValue": 200,
      "name": "fontWeight",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native DynamicStylesApplyToBasicBlocksOnly 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import SomeThing from './SomeThing.view.js';
import TrackContext from './TrackContext.view.js';
import { View } from 'react-native';

const DynamicStylesApplyToBasicBlocksOnly = props => {
  const track = React.useContext(TrackContext);

  return (
    <View
      testID={\`\${props['testID'] || 'Vertical'}|\`}
      style={[null, { height: props.height }]}
    >
      <SomeThing
        testID={\`DynamicStylesApplyToBasicBlocksOnly.OnTop|\`}
        height={props.height}
      />
      {props.children}
    </View>
  );
};

export default DynamicStylesApplyToBasicBlocksOnly;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "height",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native DynamicWidth 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { View } from 'react-native';

const DynamicWidth = props => {
  const track = React.useContext(TrackContext);

  return (
    <View
      testID={\`\${props['testID'] || 'Vertical'}|\`}
      style={[null, { width: props.width }]}
    >
      {props.children}
    </View>
  );
};
DynamicWidth.defaultProps = { width: '10%' };
export default DynamicWidth;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "10%",
      "name": "width",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native EmptyText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text } from 'react-native';

const EmptyText = props => {
  const track = React.useContext(TrackContext);

  return <Text testID={\`\${props['testID'] || 'EmptyText'}|\`} />;
};

export default EmptyText;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native FlatListPass 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { FlatList } from 'react-native';

const FlatListPass = props => {
  const track = React.useContext(TrackContext);

  return (
    <FlatList
      testID={\`\${props['testID'] || 'List'}|\`}
      data={props.from}
      keyExtractor={(item, index) => index}
      renderItem={({ stuff, index }) => (
        <Card index={index} stuff={stuff} testID={\`FlatListPass.Card|\`} />
      )}
    />
  );
};

export default FlatListPass;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Fragment 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({
  Vertical: { backgroundColor: 'red' },
  Horizontal: { flexDirection: 'row', paddingLeft: 20 },
});

const Fragment = props => {
  const track = React.useContext(TrackContext);

  return (
    <React.Fragment>
      <View testID={\`Fragment.Vertical|\`} style={styles.Vertical} />
      <View testID={\`Fragment.Horizontal|\`} style={styles.Horizontal}>
        <Text testID={\`Fragment.Text|\`}>hey</Text>
        {props.isShown ? (
          <React.Fragment>
            <Text testID={\`Fragment.Text:1|\`}>hi</Text>
          </React.Fragment>
        ) : null}
      </View>
      {props.children}
    </React.Fragment>
  );
};

export default Fragment;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "isShown",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native GoTo 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text, View } from 'react-native';

const GoTo = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
      <Text testID={\`GoTo.Text|\`}>Go to Views Tools website!</Text>
      {props.children}
    </View>
  );
};

export default GoTo;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Hover 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';

let styles = StyleSheet.create({ Text: { color: 'white' } });

const Hover = props => {
  const track = React.useContext(TrackContext);

  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({ block: 'Hover.Hover', action: 'click', event, props });
      }}
      underlayColor=\\"transparent\\"
    >
      <View
        testID={\`\${props['testID'] || 'Hover'}|\${
          props.isStuff ? 'isStuff|' : ''
        }\`}
        style={[null, { backgroundColor: props.isStuff ? 'red' : '#323232' }]}
      >
        <Text
          testID={\`Hover.Text|\`}
          style={[styles.Text, { fontSize: props.fontSize }]}
        >
          Hey!
        </Text>
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};

export default Hover;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
    Object {
      "defaultValue": false,
      "name": "fontSize",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native HyphenatedProps 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import SomeViewThatExposesAlignItems from './SomeViewThatExposesAlignItems.view.js';
import TrackContext from './TrackContext.view.js';
import { View } from 'react-native';

const HyphenatedProps = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`}>
      <View
        testID={\`HyphenatedProps.Content|\${
          props.inDesignSystem ? 'inDesignSystem|' : ''
        }\`}
        style={[
          null,
          { alignItems: props.inDesignSystem ? 'flex-start' : 'center' },
        ]}
      />
      <SomeViewThatExposesAlignItems
        testID={\`HyphenatedProps.SomeViewThatExposesAlignItems|\`}
        alignItems=\\"flex-start\\"
      />
      {props.children}
    </View>
  );
};

export default HyphenatedProps;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Indented 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({
  Horizontal: {
    flexDirection: 'row',
    backgroundColor: 'blue',
    paddingTop: 4,
    paddingBottom: 4,
  },
});

const Indented = props => {
  const track = React.useContext(TrackContext);

  return props.stuff ? (
    <View
      testID={\`\${props['testID'] || 'Indented'}|\${
        props.isSomething ? 'isSomething|' : ''
      }\`}
      style={[null, { backgroundColor: props.isSomething ? 'blue' : 'red' }]}
    >
      <Text testID={\`Indented.Text|\`}>hey</Text>
      <View testID={\`Indented.Vertical|\`}>
        <Text testID={\`Indented.Text:1|\`}>ho</Text>
        {!props.showStuff ? (
          <View
            testID={\`Indented.Horizontal|\${
              props.move ? 'move|' : !props.stuff ? 'notStuff|' : ''
            }\`}
            style={[
              styles.Horizontal,
              {
                paddingLeft: props.move ? 40 : 4,
                paddingRight: !props.stuff ? 20 : 4,
              },
            ]}
          >
            <Text testID={\`Indented.Text:2|\`}>more</Text>
          </View>
        ) : null}
      </View>
      {props.children}
    </View>
  ) : null;
};

export default Indented;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "stuff",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "showStuff",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native JustText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text } from 'react-native';

const JustText = props => {
  const track = React.useContext(TrackContext);

  return <Text testID={\`\${props['testID'] || 'JustText'}|\`}>hey!</Text>;
};

export default JustText;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Lazy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { View } from 'react-native';
let HeavyStuff = React.lazy(() => import('./HeavyStuff.view.js'));

const Lazy = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Lazy'}|\`}>
      <HeavyStuff testID={\`Lazy.HeavyStuff|\`} />
      {props.children}
    </View>
  );
};

export default Lazy;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListOfSomething 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import Something from './Something.view.js';
import TrackContext from './TrackContext.view.js';
import { FlatList, StyleSheet } from 'react-native';

let styles = StyleSheet.create({
  ListOfSomething1ContentContainer: {
    paddingLeft: 2,
    justifyContent: 'center',
    alignItems: 'flex-start',
    flexDirection: 'row',
  },
  ListOfSomething1: { flexWrap: 'wrap', backgroundColor: 'red' },
});

const ListOfSomething = props => {
  const track = React.useContext(TrackContext);

  return (
    <FlatList
      testID={\`\${props['testID'] || 'ListOfSomething'}|\`}
      style={styles.ListOfSomething1}
      contentContainerStyle={styles.ListOfSomething1ContentContainer}
      data={props.from}
      keyExtractor={(item, index) => index}
      renderItem={({ item, index }) => (
        <Something
          index={index}
          {...item}
          testID={\`ListOfSomething.Something|\`}
        />
      )}
    />
  );
};

export default ListOfSomething;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListPass 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { View } from 'react-native';

const ListPass = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'List'}|\`}>
      {Array.isArray(props.from) &&
        props.from.map((stuff, index) => (
          <Card
            index={index}
            stuff={stuff}
            key={index}
            testID={\`ListPass.Card|\`}
          />
        ))}
      {props.children}
    </View>
  );
};

export default ListPass;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListWhen 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { View } from 'react-native';

const ListWhen = props => {
  const track = React.useContext(TrackContext);

  return props.showMe ? (
    <View testID={\`\${props['testID'] || 'List'}|\`}>
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card index={index} {...item} key={index} testID={\`ListWhen.Card|\`} />
        ))}
      {props.children}
    </View>
  ) : null;
};

export default ListWhen;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "showMe",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ListWithKey 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { View } from 'react-native';

const ListWithKey = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'List'}|\`}>
      {Array.isArray(props.from) &&
        props.from.map((item, index) => (
          <Card index={index} {...item} key={id} testID={\`ListWithKey.Card|\`} />
        ))}
      {props.children}
    </View>
  );
};

export default ListWithKey;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import chopperJpg from './chopper.jpg';
import garfieldPng from './garfield.png';
import { Image } from 'react-native';

const LocalImage = props => {
  const track = React.useContext(TrackContext);

  return (
    <Image
      testID={\`\${props['testID'] || 'LocalImage'}|\${
        props.isCat ? 'isCat|' : ''
      }\`}
      source={props.isCat ? garfieldPng : chopperJpg}
    />
  );
};

export default LocalImage;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImageSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import chopperSvg from './chopper.svg';
import { Image, StyleSheet } from 'react-native';

let styles = StyleSheet.create({ LocalImageSvg1: { width: 50 } });

const LocalImageSvg = props => {
  const track = React.useContext(TrackContext);

  return (
    <Image
      testID={\`\${props['testID'] || 'LocalImageSvg'}|\`}
      source={chopperSvg}
      style={[styles.LocalImageSvg1, { height: props.height }]}
    />
  );
};
LocalImageSvg.defaultProps = { height: 50 };
export default LocalImageSvg;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 50,
      "name": "height",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalImageWithDefault 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import fileJpg from 'file.jpg';
import { Image } from 'react-native';

const LocalImageWithDefault = props => {
  const track = React.useContext(TrackContext);

  return (
    <Image
      testID={\`\${props['testID'] || 'LocalImageWithDefault'}|\`}
      source={{ uri: props.source }}
    />
  );
};
LocalImageWithDefault.defaultProps = { source: fileJpg };
export default LocalImageWithDefault;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "fileJpg",
      "name": "source",
      "type": "import",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalOrRemoteImageWhenCode 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Image } from 'react-native';

const LocalOrRemoteImageWhenCode = props => {
  const track = React.useContext(TrackContext);

  return (
    <Image
      testID={\`\${props['testID'] || 'LocalOrRemoteImageWhenCode'}|\`}
      source={{ uri: props.source }}
    />
  );
};
LocalOrRemoteImageWhenCode.defaultProps = {
  source: 'https://views.tools/image.jpg',
};
export default LocalOrRemoteImageWhenCode;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "https://views.tools/image.jpg",
      "name": "source",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Locals 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import LocalContainer from './LocalContainer.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Subscribe } from 'unstated';
import { Text, View } from 'react-native';

const TextLocal = {
  es: 'Hola',
  pl: 'Cześć',
  zhHansCN: '嗨',
};
const TextLocal1 = {
  es: 'Mas',
};
const NamedLocal = {
  es: 'Chau, \\"dijo el amigo de alguien\\"!',
};

const Locals = props => {
  const track = React.useContext(TrackContext);

  return (
    <Subscribe to={[LocalContainer]}>
      {local => (
        <View testID={\`\${props['testID'] || 'Locals'}|\`}>
          <Text testID={\`Locals.Text|\`}>
            {TextLocal[local.state.lang] || 'Hi'}
          </Text>
          <Text testID={\`Locals.Text:1|\`}>
            {TextLocal1[local.state.lang] || 'More'}
          </Text>
          <Text testID={\`Locals.Named|\`}>
            {NamedLocal[local.state.lang] || 'Bye, \\"Said someone\\\\'s friend\\"!'}
          </Text>
          {props.children}
        </View>
      )}
    </Subscribe>
  );
};

export default Locals;
",
  "dependencies": Set {
    "unstated",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native LocalsFormat 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text, View } from 'react-native';

const currencyOptions = { style: 'currency', currency: 'USD' };
const currencyFormatters = {
  en: new Intl.NumberFormat('en', currencyOptions),
  es: new Intl.NumberFormat('es', currencyOptions),
  fr: new Intl.NumberFormat('fr', currencyOptions),
};
const dateOptions = {
  weekday: 'long',
  year: 'numeric',
  month: 'numeric',
  day: '2-digit',
};
const dateFormatters = {
  en: new Intl.DateTimeFormat('en', dateOptions),
  es: new Intl.DateTimeFormat('es', dateOptions),
  fr: new Intl.DateTimeFormat('fr', dateOptions),
};
const percentOptions = { style: 'percent', maximumFractionDigits: 2 };
const percentFormatters = {
  en: new Intl.NumberFormat('en', percentOptions),
  es: new Intl.NumberFormat('es', percentOptions),
  fr: new Intl.NumberFormat('fr', percentOptions),
};
const timeOptions = {
  hour: 'numeric',
  minute: 'numeric',
  second: '2-digit',
  hour12: true,
};
const timeFormatters = {
  en: new Intl.DateTimeFormat('en', timeOptions),
  es: new Intl.DateTimeFormat('es', timeOptions),
  fr: new Intl.DateTimeFormat('fr', timeOptions),
};

const LocalsFormat = props => {
  const track = React.useContext(TrackContext);

  return (
    <Subscribe to={[LocalContainer]}>
      {local => (
        <View testID={\`\${props['testID'] || 'LocalsFormat'}|\`}>
          <Text testID={\`LocalsFormat.Price|\`}>
            {currencyFormatters[local.state.lang].format(100)}
          </Text>
          <Text testID={\`LocalsFormat.Date|\`}>
            {dateFormatters[local.state.lang].format(Date.parse('2018-07-08'))}
          </Text>
          <Text testID={\`LocalsFormat.Percentage|\`}>
            {percentFormatters[local.state.lang].format(0.805)}
          </Text>
          <Text testID={\`LocalsFormat.Time|\`}>
            {timeFormatters[local.state.lang].format(
              Date.UTC(2018, 14, 3, 3, 0)
            )}
          </Text>
          {props.children}
        </View>
      )}
    </Subscribe>
  );
};

export default LocalsFormat;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NameIsType 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text } from 'react-native';

const NameIsType = props => {
  const track = React.useContext(TrackContext);

  return <Text testID={\`\${props['testID'] || 'Texto'}|\`}>iam</Text>;
};

export default NameIsType;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NegativeNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text } from 'react-native';

let styles = StyleSheet.create({ Text: { marginTop: -10 } });

const NegativeNumber = props => {
  const track = React.useContext(TrackContext);

  return (
    <Text testID={\`\${props['testID'] || 'Text'}|\`} style={styles.Text}>
      hey
    </Text>
  );
};

export default NegativeNumber;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native NestedRoutes 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import Topic from './Topic.view.js';
import TrackContext from './TrackContext.view.js';
import { Link } from 'react-router-native';
import { Route } from 'react-router-native';
import { Text, View } from 'react-native';

const NestedRoutes = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Topics'}|\`}>
      <Text testID={\`NestedRoutes.Text|\`}>topics</Text>
      <Link activeOpacity={0.7} to=\\"rendering\\" underlayColor=\\"transparent\\">
        <View to=\\"rendering\\" testID={\`NestedRoutes.Link|\`}>
          <Text testID={\`NestedRoutes.Text:1|\`}>Rendering with React</Text>
        </View>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps => (
          <Topic testID={\`NestedRoutes.Topic|\`} {...routeProps} />
        )}
      />
      {props.children}
    </View>
  );
};

export default NestedRoutes;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Proxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import ActionGhostedProps from './ActionGhostedProps.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';

let styles = StyleSheet.create({
  Button: {
    alignItems: 'center',
    backgroundColor: '#f2f2f2',
    paddingBottom: 8,
    paddingLeft: 12,
    paddingRight: 12,
    paddingTop: 8,
  },
  Text: { marginTop: 4 },
});

const Proxy = props => {
  const track = React.useContext(TrackContext);

  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({ block: 'Proxy.Button', action: 'click', event, props });
      }}
      underlayColor=\\"transparent\\"
    >
      <View testID={\`\${props['testID'] || 'Button'}|\`} style={styles.Button}>
        <props.proxyActionGhostedProps
          testID={\`Proxy.ActionGhostedProps|\${
            props.isSelected ? 'isSelected|' : ''
          }\`}
          proxy={true}
          stroke={props.isSelected ? 'purple' : 'red'}
          height={props.isSelected ? 24 : 20}
          width={props.isSelected ? 24 : 20}
        />
        <Text
          testID={\`Proxy.Text|\`}
          style={[styles.Text, { color: props.color }]}
        >
          {props.text}
        </Text>
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};
Proxy.defaultProps = {
  proxyActionGhostedProps: ActionGhostedProps,
  color: '#404040',
  text: 'Label',
};
export default Proxy;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
    Object {
      "defaultValue": "ActionGhostedProps",
      "name": "proxyActionGhostedProps",
      "type": "import",
    },
    Object {
      "defaultValue": "#404040",
      "name": "color",
      "type": "string",
    },
    Object {
      "defaultValue": "Label",
      "name": "text",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Scope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text } from 'react-native';

const Scope = props => {
  const track = React.useContext(TrackContext);

  return (
    <Text
      testID={\`\${props['testID'] || 'Scope'}|\${
        props.somethingGreen
          ? 'somethingGreen|'
          : props.whatMakesBlue
          ? 'whatMakesBlue|'
          : !props.whatMakesBlue
          ? 'notWhatMakesBlue|'
          : ''
      }\`}
      style={[
        null,
        {
          color: props.somethingGreen
            ? 'rgb(0,255,0)'
            : props.whatMakesBlue
            ? 'rgb(0,0,255)'
            : !props.whatMakesBlue
            ? 'rgb(255,255,0)'
            : 'red',
        },
      ]}
    >
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue
        ? props.blue
        : !props.whatMakesBlue
        ? 'is Yellow'
        : '1 red'}
    </Text>
  );
};

export default Scope;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopeOnCustomView 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Button from './Button.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';

const ScopeOnCustomView = props => {
  const track = React.useContext(TrackContext);

  return (
    <Button
      testID={\`\${props['testID'] || 'Button'}|\${
        props.a ? 'a|' : props.b ? 'b|' : ''
      }\`}
      label={props.a ? 'ho' : props.b ? 'this is b' : 'hey'}
      another={props.a ? 1 : 0}
      more={props.a ? props.more : props.more}
    >
      {props.children}
    </Button>
  );
};

export default ScopeOnCustomView;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "more",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopePopup 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text, TouchableWithoutFeedback, View } from 'react-native';

const ScopePopup = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Popup'}|\`}>
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={
          props.somethingGreen
            ? props.onClickGreen
            : props.whatMakesBlue
            ? props.onClickBlue
            : props.toggle
        }
        underlayColor=\\"transparent\\"
      >
        <View
          testID={\`ScopePopup.Toggle|\${
            props.somethingGreen
              ? 'somethingGreen|'
              : props.whatMakesBlue
              ? 'whatMakesBlue|'
              : ''
          }\`}
        >
          <Text testID={\`ScopePopup.Text|\`}>toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      {props.children}
    </View>
  );
};

export default ScopePopup;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "toggle",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopePopup2 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text, TouchableWithoutFeedback, View } from 'react-native';

const ScopePopup2 = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Popup'}|\`}>
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={event => {
          typeof props.toggle === 'function' && props.toggle(event);

          track({ block: 'ScopePopup2.Toggle', action: 'click', event, props });
        }}
        underlayColor=\\"transparent\\"
      >
        <View testID={\`ScopePopup2.Toggle|\`}>
          <Text testID={\`ScopePopup2.Text|\`}>toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      <View
        testID={\`ScopePopup2.Content|\${
          props.isShown
            ? 'isShown|'
            : props.isSuperVisible
            ? 'isSuperVisible|'
            : ''
        }\`}
        style={[
          null,
          {
            opacity: props.isShown ? 1 : props.isSuperVisible ? 3 : 0,
            transform: [
              { scale: props.isShown ? 1 : props.isSuperVisible ? 2 : 0 },
            ],
          },
        ]}
      >
        <Text testID={\`ScopePopup2.Text:1|\`}>I'm inside the popup</Text>
      </View>
      {props.children}
    </View>
  );
};

export default ScopePopup2;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "toggle",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScopedShadows 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import * as Easing from 'd3-ease';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, TouchableWithoutFeedback, View } from 'react-native';
import { animated, Spring } from 'react-spring';
let AnimatedView = animated(View);

let styles = StyleSheet.create({
  ScopedShadows1: {
    flexDirection: 'row',
    shadowOffset: { width: 0, height: 5 },
    elevation: 1,
    shadowOpacity: 1,
  },
});

class ScopedShadows extends React.Component {
  render() {
    const { props } = this;

    return (
      <TrackContext.Consumer>
        {track => (
          <Spring
            native
            config={{ duration: 150 }}
            to={{
              shadowColor: props.isClicked
                ? 'rgba(14, 0, 232, 0.66)'
                : 'rgba(232, 188, 0, 0.66)',
              shadowBlur: props.isClicked ? 10 : 20,
            }}
          >
            {animatedScopedShadows => (
              <TouchableWithoutFeedback
                activeOpacity={0.7}
                onPress={event => {
                  typeof props.onClick === 'function' && props.onClick(event);

                  track({
                    block: 'ScopedShadows.ScopedShadows',
                    action: 'click',
                    event,
                    props,
                  });
                }}
                underlayColor=\\"transparent\\"
              >
                <AnimatedView
                  testID={\`\${props['testID'] || 'ScopedShadows'}|\${
                    props.isClicked ? 'isClicked|' : ''
                  }\`}
                  style={{
                    ...styles.ScopedShadows1,
                    shadowColor: animatedScopedShadows.shadowColor,
                    shadowBlur: animatedScopedShadows.shadowBlur,
                  }}
                >
                  {props.children}
                </AnimatedView>
              </TouchableWithoutFeedback>
            )}
          </Spring>
        )}
      </TrackContext.Consumer>
    );
  }
}

export default ScopedShadows;
",
  "dependencies": Set {
    "react-spring",
    "d3-ease",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ScrollableList 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Card from './Card.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { FlatList, StyleSheet } from 'react-native';

let styles = StyleSheet.create({
  ScrollableList1ContentContainer: { paddingBottom: 200 },
  ScrollableList1: { backgroundColor: 'red' },
});

const ScrollableList = props => {
  const track = React.useContext(TrackContext);

  return (
    <FlatList
      testID={\`\${props['testID'] || 'ScrollableList'}|\`}
      style={styles.ScrollableList1}
      contentContainerStyle={[
        styles.ScrollableList1ContentContainer,
        { paddingLeft: props.paddingLeft },
      ]}
      data={props.from}
      keyExtractor={(item, index) => index}
      renderItem={({ item, index }) => (
        <Card index={index} {...item} testID={\`ScrollableList.Card|\`} />
      )}
    />
  );
};

export default ScrollableList;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "array",
    },
    Object {
      "defaultValue": false,
      "name": "paddingLeft",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Shadow 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({
  BoxShadow: {
    shadowRadius: 2,
    elevation: 1,
    shadowOpacity: 1,
    shadowOffset: { width: 0, height: 5 },
  },
  TextShadow: {
    shadowRadius: 1,
    elevation: 1,
    shadowOpacity: 1,
    shadowOffset: { width: 2, height: 3 },
  },
});

const Shadow = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Shadow'}|\`}>
      <View
        testID={\`Shadow.BoxShadow|\`}
        style={[
          styles.BoxShadow,
          { shadowColor: props.shadowColor, elevation: 1, shadowOpacity: 1 },
        ]}
      >
        <Text
          testID={\`Shadow.TextShadow|\`}
          style={[
            styles.TextShadow,
            { shadowColor: props.shadowColor, elevation: 1, shadowOpacity: 1 },
          ]}
        >
          hey
        </Text>
      </View>
      {props.children}
    </View>
  );
};
Shadow.defaultProps = { shadowColor: 'red' };
export default Shadow;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": "red",
      "name": "shadowColor",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native SlotOnBaseAndValueOnScope 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text } from 'react-native';

const SlotOnBaseAndValueOnScope = props => {
  const track = React.useContext(TrackContext);

  return (
    <Text
      testID={\`\${props['testID'] || 'SlotOnBaseAndValueOnScope'}|\${
        props.something ? 'something|' : ''
      }\`}
      style={[null, { color: props.something ? 'blue' : props.color }]}
    />
  );
};

export default SlotOnBaseAndValueOnScope;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "color",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native SomeMissingStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, TouchableWithoutFeedback, View } from 'react-native';

let styles = StyleSheet.create({
  WindowControl: {
    marginRight: 8,
    backgroundColor: '#CBCDCE',
    opacity: 0.7,
    transform: [{ scale: 1.1 }],
    width: 10,
    height: 10,
  },
});

const SomeMissingStyle = props => {
  const track = React.useContext(TrackContext);

  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={event => {
        typeof props.onClick === 'function' && props.onClick(event);

        track({
          block: 'SomeMissingStyle.WindowControl',
          action: 'click',
          event,
          props,
        });
      }}
      underlayColor=\\"transparent\\"
    >
      <View
        testID={\`\${props['testID'] || 'WindowControl'}|\`}
        tabIndex={-1}
        style={styles.WindowControl}
      >
        {props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};

export default SomeMissingStyle;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onClick",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Teleport 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Link } from 'react-router-native';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({ Horizontal: { flexDirection: 'row' } });

const Teleport = props => {
  const track = React.useContext(TrackContext);

  return (
    <Link activeOpacity={0.7} to=\\"..\\" underlayColor=\\"transparent\\">
      <View
        to=\\"..\\"
        testID={\`\${props['testID'] || 'Horizontal'}|\`}
        style={styles.Horizontal}
      >
        <Text testID={\`Teleport.Text|\`}>go back</Text>
        {props.children}
      </View>
    </Link>
  );
};

export default Teleport;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native TestIds 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import External from './External.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text, View } from 'react-native';

const TestIds = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'App'}|\`}>
      <Text testID={\`TestIds.Text|\`}>1</Text>
      <Text testID={\`TestIds.Text:1|\`}>2</Text>
      <External testID={\`TestIds.External|\`} />
      <Text testID={\`TestIds.Name|\`}>name</Text>
      {props.children}
    </View>
  );
};

export default TestIds;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native Transform 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({
  Transform1: {
    transform: [
      { rotate: '4deg' },
      { rotateX: '5deg' },
      { rotateY: '6deg' },
      { scale: 3 },
      { translateX: 1 },
      { translateY: 2 },
    ],
    transformOriginX: 'center',
    transformOriginY: 'top',
  },
});

const Transform = props => {
  const track = React.useContext(TrackContext);

  return (
    <View
      testID={\`\${props['testID'] || 'Transform'}|\`}
      style={styles.Transform1}
    >
      <Text
        testID={\`Transform.Text|\`}
        style={[
          null,
          {
            transformOriginX: props.transformOriginX,
            transformOriginY: props.transformOriginY,
          },
        ]}
      >
        who knows what happens here :D
      </Text>
      {props.children}
    </View>
  );
};

export default Transform;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "transformOriginX",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "transformOriginY",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureEmail 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, TextInput } from 'react-native';

let styles = StyleSheet.create({
  Email: {
    borderColor: 'black',
    borderStyle: 'solid',
    borderWidth: 1,
    color: 'red',
  },
});

const UseCaptureEmail = props => {
  const track = React.useContext(TrackContext);

  return (
    <TextInput
      keyboardType=\\"email-address\\"
      autoCorrect={false}
      underlineColorAndroid=\\"transparent\\"
      textAlignVertical=\\"top\\"
      testID={\`\${props['testID'] || 'Email'}|\`}
      autoFocus={true}
      defaultValue=\\"hey this is a default value\\"
      style={styles.Email}
    />
  );
};

export default UseCaptureEmail;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "onSubmit",
      "type": "function",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureFile 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { TextInput } from 'react-native';

const UseCaptureFile = props => {
  const track = React.useContext(TrackContext);

  return (
    <TextInput
      autoCorrect={false}
      underlineColorAndroid=\\"transparent\\"
      textAlignVertical=\\"top\\"
      testID={\`\${props['testID'] || 'File'}|\`}
    />
  );
};

export default UseCaptureFile;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureNumber 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { TextInput } from 'react-native';

const UseCaptureNumber = props => {
  const track = React.useContext(TrackContext);

  return (
    <TextInput
      keyboardType=\\"numeric\\"
      autoCorrect={false}
      underlineColorAndroid=\\"transparent\\"
      textAlignVertical=\\"top\\"
      testID={\`\${props['testID'] || 'Number'}|\`}
    />
  );
};

export default UseCaptureNumber;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCapturePhone 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { TextInput } from 'react-native';

const UseCapturePhone = props => {
  const track = React.useContext(TrackContext);

  return (
    <TextInput
      keyboardType=\\"phone-pad\\"
      autoCorrect={false}
      underlineColorAndroid=\\"transparent\\"
      textAlignVertical=\\"top\\"
      testID={\`\${props['testID'] || 'Phone'}|\`}
    />
  );
};

export default UseCapturePhone;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureSecure 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { TextInput } from 'react-native';

const UseCaptureSecure = props => {
  const track = React.useContext(TrackContext);

  return (
    <TextInput
      secureTextEntry
      autoCorrect={false}
      underlineColorAndroid=\\"transparent\\"
      textAlignVertical=\\"top\\"
      testID={\`\${props['testID'] || 'Secure'}|\`}
    />
  );
};

export default UseCaptureSecure;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import LocalContainer from './LocalContainer.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Subscribe } from 'unstated';
import { TextInput } from 'react-native';

const TextLocal = {
  es: 'Escriba sus comentarios aqui...',
};

const UseCaptureText = props => {
  const track = React.useContext(TrackContext);

  return (
    <Subscribe to={[LocalContainer]}>
      {local => (
        <TextInput
          autoCorrect={false}
          underlineColorAndroid=\\"transparent\\"
          textAlignVertical=\\"top\\"
          testID={\`\${props['testID'] || 'Text'}|\`}
          placeholder={TextLocal[local.state.lang] || 'Type feedback here...'}
        />
      )}
    </Subscribe>
  );
};

export default UseCaptureText;
",
  "dependencies": Set {
    "unstated",
  },
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextArea 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { TextInput } from 'react-native';

const UseCaptureTextArea = props => {
  const track = React.useContext(TrackContext);

  return (
    <TextInput
      multiline={true}
      autoCorrect={false}
      underlineColorAndroid=\\"transparent\\"
      textAlignVertical=\\"top\\"
      testID={\`\${props['testID'] || 'CaptureTextArea'}|\`}
    />
  );
};

export default UseCaptureTextArea;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseCaptureTextManagedFromOutside 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { TextInput } from 'react-native';

const UseCaptureTextManagedFromOutside = props => {
  const track = React.useContext(TrackContext);

  return (
    <TextInput
      autoCorrect={false}
      underlineColorAndroid=\\"transparent\\"
      textAlignVertical=\\"top\\"
      testID={\`\${props['testID'] || 'Capture'}|\`}
      value={props.external}
    />
  );
};

export default UseCaptureTextManagedFromOutside;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "external",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseHorizontal 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({
  Horizontal: {
    flexDirection: 'row',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  },
});

const UseHorizontal = props => {
  const track = React.useContext(TrackContext);

  return (
    <View
      testID={\`\${props['testID'] || 'Horizontal'}|\`}
      style={styles.Horizontal}
    >
      {props.children}
    </View>
  );
};

export default UseHorizontal;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseImage 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Image } from 'react-native';

const UseImage = props => {
  const track = React.useContext(TrackContext);

  return (
    <Image
      testID={\`\${props['testID'] || 'Image'}|\${
        props.another ? 'another|' : ''
      }\`}
      source={{
        uri: props.another
          ? 'https://views.tools/hi.jpg'
          : 'https://views.tools/rocks.jpg',
      }}
    />
  );
};

export default UseImage;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseProxy 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import AnotherIcon from './AnotherIcon.view.js';
import Button from './Button.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { View } from 'react-native';

const UseProxy = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'UseProxy'}|\`}>
      <Button
        proxyActionGhostedProps={AnotherIcon}
        testID={\`UseProxy.Button|\`}
      />
      {props.children}
    </View>
  );
};

export default UseProxy;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseRouter 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import About from './About.view.js';
import Home from './Home.view.js';
import React from 'react';
import Topics from './Topics.view.js';
import TrackContext from './TrackContext.view.js';
import { NativeRouter as Router } from 'react-router-native';
import { Route } from 'react-router-native';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({ Horizontal: { flexDirection: 'row' } });

const UseRouter = props => {
  const track = React.useContext(TrackContext);

  return (
    <Router>
      <View
        testID={\`\${props['testID'] || 'Horizontal'}|\`}
        style={styles.Horizontal}
      >
        <Route
          path=\\"/\\"
          exact
          render={routeProps => (
            <Home
              testID={\`UseRouter.Home|\`}
              height={props.height}
              width={360}
              {...routeProps}
            />
          )}
        />
        <Route
          path=\\"/about\\"
          render={routeProps => (
            <About testID={\`UseRouter.About|\`} {...routeProps} />
          )}
        />
        <Route
          path=\\"/topics\\"
          render={routeProps => (
            <Topics testID={\`UseRouter.Topics|\`} {...routeProps} />
          )}
        />
        {props.children}
      </View>
    </Router>
  );
};
UseRouter.defaultProps = { height: 10 };
export default UseRouter;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 10,
      "name": "height",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseSvg 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import Svg, {
  Circle as SvgCircle,
  G as SvgGroup,
  Path as SvgPath,
  Text as SvgText,
} from 'react-native-svg';
import TrackContext from './TrackContext.view.js';

const UseSvg = props => {
  const track = React.useContext(TrackContext);

  return (
    <Svg
      testID={\`\${props['testID'] || 'Svg'}|\`}
      viewBox=\\"0 0 20 20\\"
      height={20}
      width={20}
    >
      <SvgPath
        testID={\`UseSvg.SvgPath|\`}
        d=\\"0 20\\"
        fill=\\"red\\"
        fillOpacity={props.opacity}
      />
      <SvgCircle testID={\`UseSvg.SvgCircle|\`} cx={10} cy={5} r={5} />
      <SvgGroup
        testID={\`UseSvg.SvgGroup|\`}
        transform=\\"translate(6.000000, 5.000000)\\"
      >
        <SvgPath testID={\`UseSvg.SvgPath:1|\`} d={1} />
        <SvgPath testID={\`UseSvg.SvgPath:2|\`} d={2} />
      </SvgGroup>
      <SvgText testID={\`UseSvg.SvgText|\`} text=\\"hey\\" />
      {props.children}
    </Svg>
  );
};
UseSvg.defaultProps = { opacity: 0.5 };
export default UseSvg;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 0.5,
      "name": "opacity",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseTable 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Cell from './Cell.view.js';
import Column from './Column.view.js';
import Header from './Header.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { AutoSizer, Column, Table } from '@viewstools/tables/native';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({
  Table1: {
    rowColor: '#1C1C1C',
    rowBackgroundColor: 'white',
    rowBackgroundColorAlternate: 'black',
  },
});

const UseTable = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'UseTable'}|\`}>
      <AutoSizer>
        {({ width, height }) => (
          <Table
            width={width}
            height={height}
            rowCount={Array.isArray(props.from) ? props.from.length : 0}
            rowGetter={({ index }) => props.from[index]}
            testID={\`UseTable.Table|\`}
            headerHeight={40}
            rowHeight={20}
            style={[
              styles.Table1,
              { rowColorAlternate: props.rowColorAlternate },
            ]}
          >
            <Column
              dataKey=\\"name\\"
              width={90}
              headerRenderer={headerProps => (
                <Header {...headerProps} text=\\"Name\\" />
              )}
              cellRenderer={cellProps => <Cell {...cellProps} />}
              testID={\`UseTable.Name|\`}
              key=\\"name\\"
            />
            <Column
              dataKey=\\"location\\"
              width={(width - 90) / 2}
              cellRenderer={cellProps => <Cell {...cellProps} />}
              testID={\`UseTable.Location|\`}
              key=\\"location\\"
            />
            <Column
              dataKey=\\"description\\"
              width={(width - 90) / 2}
              cellRenderer={cellProps => <Cell {...cellProps} />}
              testID={\`UseTable.Description|\`}
              key=\\"description\\"
            />
          </Table>
        )}
      </AutoSizer>
      {props.children}
    </View>
  );
};

export default UseTable;
",
  "dependencies": Set {
    "@viewstools/tables",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "rowColorAlternate",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseTableOnWhen 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Cell from './Cell.view.js';
import Column from './Column.view.js';
import Header from './Header.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { AutoSizer, Column, Table } from '@viewstools/tables/native';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({
  Table1: {
    rowColor: '#1C1C1C',
    rowBackgroundColor: 'white',
    rowBackgroundColorAlternate: 'black',
  },
  Name: { borderStyle: 'solid', borderBottomWidth: 1 },
});

const UseTableOnWhen = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'UseTableOnWhen'}|\`}>
      {props.stuff ? (
        <AutoSizer>
          {({ width, height }) => (
            <Table
              width={width}
              height={height}
              rowCount={Array.isArray(props.from) ? props.from.length : 0}
              rowGetter={({ index }) => props.from[index]}
              testID={\`UseTableOnWhen.Table|\`}
              headerHeight={40}
              rowHeight={20}
              style={[
                styles.Table1,
                {
                  marginLeft: props.marginLeft,
                  rowColorAlternate: props.rowColorAlternate,
                },
              ]}
            >
              <Column
                dataKey=\\"name\\"
                width={90}
                headerRenderer={headerProps => (
                  <Header {...headerProps} text=\\"Name\\" />
                )}
                cellRenderer={cellProps => <Cell {...cellProps} />}
                testID={\`UseTableOnWhen.Name|\`}
                key=\\"name\\"
                style={[styles.Name, { borderBottomColor: props.borderColor }]}
              />
            </Table>
          )}
        </AutoSizer>
      ) : null}
      {props.children}
    </View>
  );
};

export default UseTableOnWhen;
",
  "dependencies": Set {
    "@viewstools/tables",
  },
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "stuff",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "from",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "marginLeft",
      "type": "number",
    },
    Object {
      "defaultValue": false,
      "name": "rowColorAlternate",
      "type": "string",
    },
    Object {
      "defaultValue": false,
      "name": "borderColor",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseText 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text } from 'react-native';

let styles = StyleSheet.create({
  UseText1: { fontFamily: 'Montserrat-300', fontSize: 16, lineHeight: 24 },
});

const UseText = props => {
  const track = React.useContext(TrackContext);

  return (
    <Text
      testID={\`\${props['testID'] || 'UseText'}|\${
        props.isSomething ? 'isSomething|' : ''
      }\`}
      style={[styles.UseText1, { color: props.isSomething ? 'red' : 'blue' }]}
    >
      Hi, I'm some text
    </Text>
  );
};

export default UseText;
",
  "dependencies": Set {},
  "fonts": Array [
    Object {
      "family": "Montserrat",
      "id": "Montserrat-300",
      "style": "normal",
      "weight": "300",
    },
  ],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseTextCustomFont 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({
  Normal: {
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle-300',
    fontSize: 16,
    lineHeight: 24,
  },
  Italic: {
    color: 'blue',
    fontFamily: 'CustomFontNotOnGoogle-400',
    fontStyle: 'italic',
    fontSize: 16,
    lineHeight: 24,
  },
});

const UseTextCustomFont = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'UseTextCustomFont'}|\`}>
      <Text
        testID={\`UseTextCustomFont.Normal|\`}
        fontType=\\"sans-serif\\"
        style={styles.Normal}
      >
        Hi, I'm some text
      </Text>
      <Text
        testID={\`UseTextCustomFont.Italic|\`}
        fontType=\\"sans-serif\\"
        style={styles.Italic}
      >
        Hi, I'm some text
      </Text>
      {props.children}
    </View>
  );
};

export default UseTextCustomFont;
",
  "dependencies": Set {},
  "fonts": Array [
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-300",
      "style": "normal",
      "weight": "300",
    },
    Object {
      "family": "CustomFontNotOnGoogle",
      "id": "CustomFontNotOnGoogle-400-italic",
      "style": "italic",
      "weight": "400",
    },
  ],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native UseVertical 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({ Vertical: { backgroundColor: 'red' } });

const UseVertical = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'Vertical'}|\`} style={styles.Vertical}>
      {props.children}
    </View>
  );
};

export default UseVertical;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ViewAndBlockSameName 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import Button from './Button.view.js';
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({ Button: { backgroundColor: 'red' } });

const ViewAndBlockSameName = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'App'}|\`}>
      <View testID={\`ViewAndBlockSameName.Button|\`} style={styles.Button} />
      <Button testID={\`ViewAndBlockSameName.Thing|\`} />
      {props.children}
    </View>
  );
};

export default ViewAndBlockSameName;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native ViewNameIsntUsedInStyle 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, View } from 'react-native';

let styles = StyleSheet.create({ ViewNameIsntUsedInStyle1: { zIndex: 5 } });

const ViewNameIsntUsedInStyle = props => {
  const track = React.useContext(TrackContext);

  return (
    <View
      testID={\`\${props['testID'] || 'ViewNameIsntUsedInStyle'}|\`}
      style={[styles.ViewNameIsntUsedInStyle1, { opacity: props.opacity }]}
    >
      {props.children}
    </View>
  );
};
ViewNameIsntUsedInStyle.defaultProps = { opacity: 1 };
export default ViewNameIsntUsedInStyle;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": 1,
      "name": "opacity",
      "type": "number",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native When 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { StyleSheet, Text, View } from 'react-native';

let styles = StyleSheet.create({ App: { flexDirection: 'row' } });

const When = props => {
  const track = React.useContext(TrackContext);

  return (
    <View testID={\`\${props['testID'] || 'App'}|\`} style={styles.App}>
      {props.showMe ? <Text testID={\`When.Text|\`}>I may be hidden</Text> : null}
      {props.children}
    </View>
  );
};

export default When;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "showMe",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;

exports[`react-native parses react-native WhenTopLevel 1`] = `
Object {
  "code": "/* eslint-disable jsx-a11y/accessible-emoji, no-unused-vars, no-dupe-keys */
import React from 'react';
import TrackContext from './TrackContext.view.js';
import { Text } from 'react-native';

const WhenTopLevel = props => {
  const track = React.useContext(TrackContext);

  return props.showMe ? (
    <Text testID={\`\${props['testID'] || 'Text'}|\`}>I may be hidden</Text>
  ) : null;
};

export default WhenTopLevel;
",
  "dependencies": Set {},
  "fonts": Array [],
  "slots": Array [
    Object {
      "defaultValue": false,
      "name": "showMe",
      "type": "string",
    },
  ],
  "svgs": Array [],
}
`;
